/*
   Directory Opus 9 Plugin Support
   Header File

   (c) Copyright 2009 GP Software
   All Rights Reserved
*/

#ifndef DOPUS_PLUGINSUPPORT
#define DOPUS_PLUGINSUPPORT

/********************************************************************************/
//
// These functions are exported from dopus.exe for use by plugins                
//                                                                              
// For example, to retrieve the Opus thumbnail settings:
//
//		PFNGETTHUMBNAILPREFS pfnGetThumbPrefs;
//		pfnGetThumbPrefs=(PFNGETTHUMBNAILPREFS)GetProcAddress( GetModuleHandle( 0 ), FUNCNAME_GETTHUMBNAILPREFS );
//		if (pfnGetThumbPrefs != 0)
//		{
//			DOPUSTHUMBNAILPREFSDATA dtp;
//			dtp.cbSize=sizeof(dtp);
//			pfnGetThumbPrefs(&dtp);
//		}
//
// Or use the DOpusPluginHelper helper class. For example,
//
//		DOpusPluginHelper dpHelper;
//		DOPUSTHUMBNAILPREFSDATA dtp;
//		dtp.cbSize=sizeof(dtp);
//		dpHelper.GetThumbnailPrefs(&dtp);
//
/********************************************************************************/

// Structures for load/save config helpers

#define OPUSCFG_LOAD		0
#define OPUSCFG_SAVE		1

enum
{
	DPCITYPE_Bool,
	DPCITYPE_Int,
	DPCITYPE_DWORD,
	DPCITYPE_LPSTR,
	DPCITYPE_LPWSTR,
	DPCITYPE_Binary,
	DPCITYPE_LOGFONT,
	DPCITYPE_Child,
};

#ifdef UNICODE
#define DPCITYPE_LPTSTR		DPCITYPE_LPWSTR
#else
#define DPCITYPE_LPTSTR		DPCITYPE_LPSTR
#endif

typedef struct DOpusPluginConfigItemA
{
	LPCSTR			pszName;
	int				iType;
	LPVOID			pData;
	DWORD			dwDataSize;
} DOPUSPLUGINCONFIGITEMA, * LPDOPUSPLUGINCONFIGITEMA;

typedef struct DOpusPluginConfigDataA
{
	UINT					cbSize;
	LPCSTR					pszName;
	BOOL					fStateData;
	int						iNumCfgItems;
	DOPUSPLUGINCONFIGITEMA*	pCfgItemArray;
} DOPUSPLUGINCONFIGDATAA, * LPDOPUSPLUGINCONFIGDATAA;

typedef struct DOpusPluginConfigItemW
{
	LPCWSTR			pszName;
	int				iType;
	LPVOID			pData;
	DWORD			dwDataSize;
} DOPUSPLUGINCONFIGITEMW, * LPDOPUSPLUGINCONFIGITEMW;

typedef struct DOpusPluginConfigDataW
{
	UINT					cbSize;
	LPCWSTR					pszName;
	BOOL					fStateData;
	int						iNumCfgItems;
	DOPUSPLUGINCONFIGITEMW*	pCfgItemArray;
} DOPUSPLUGINCONFIGDATAW, * LPDOPUSPLUGINCONFIGDATAW;

#ifdef UNICODE
#define DOPUSPLUGINCONFIGITEM	DOPUSPLUGINCONFIGITEMW
#define DOPUSPLUGINCONFIGDATA	DOPUSPLUGINCONFIGDATAW
#define LPDOPUSPLUGINCONFIGITEM	LPDOPUSPLUGINCONFIGITEMW
#define LPDOPUSPLUGINCONFIGDATA	LPDOPUSPLUGINCONFIGDATAW
#else
#define DOPUSPLUGINCONFIGITEM	DOPUSPLUGINCONFIGITEMA
#define DOPUSPLUGINCONFIGDATA	DOPUSPLUGINCONFIGDATAA
#define LPDOPUSPLUGINCONFIGITEM	LPDOPUSPLUGINCONFIGITEMA
#define LPDOPUSPLUGINCONFIGDATA	LPDOPUSPLUGINCONFIGDATAA
#endif


// Structure for GetThumbnailPrefs
typedef struct DOpusThumbnailPrefsData
{
	UINT		cbSize;
	DWORD		dwFlags;
	COLORREF	crFillColor;
	SIZE		szThumbSize;
	SIZE		szMinThumbSize;
	SIZE		szMaxThumbSize;
} DOPUSTHUMBNAILPREFSDATA, * LPDOPUSTHUMBNAILPREFSDATA;

#define DTHUMBF_GRAYSCALE		(1<<0)	// Grayscale thumbnails
#define DTHUMBF_SHOWICON		(1<<1)	// Show filetype icon
#define DTHUMBF_HIDEICON		(1<<2)	// Hide filetype icon for unregistered filetypes
#define DTHUMBF_USESHELL		(1<<3)	// Use shell image extraction
#define DTHUMBF_HIGHQUALITY		(1<<4)	// High quality
#define DTHUMBF_FOLDERS			(1<<5)	// Generate folder thumbnails
#define DTHUMBF_FOLDERCONTENTS	(1<<6)	// Generate from folder contents
#define DTHUMBF_AUTOROTATE		(1<<7)	// Auto-rotate using EXIF



// Structure for OpusChooseFont
typedef struct DOpusChooseFontA
{
	UINT		cbSize;
	LPLOGFONTA	lpFont;
	DWORD		dwFlags;
	LPCSTR		lpszTitle;
} DOPUSCHOOSEFONTA, * LPDOPUSCHOOSEFONTA;

typedef struct DOpusChooseFontW
{
	UINT		cbSize;
	LPLOGFONTW	lpFont;
	DWORD		dwFlags;
	LPCWSTR		lpszTitle;
} DOPUSCHOOSEFONTW, * LPDOPUSCHOOSEFONTW;

#define DCHOOSEFONTF_FIXEDONLY	(1<<0)	// Fixed fonts only

#ifdef UNICODE
#define DOPUSCHOOSEFONT				DOPUSCHOOSEFONTW
#define LPDOPUSCHOOSEFONT			LPDOPUSCHOOSEFONTW
#else
#define DOPUSCHOOSEFONT				DOPUSCHOOSEFONTA
#define LPDOPUSCHOOSEFONT			LPDOPUSCHOOSEFONTA
#endif


// Path types for GetConfigPath
#define OPUSPATH_CONFIG			0
#define OPUSPATH_STATEDATA		1


// ShowFunctionErrorDlg codes
#define ERRORACTION_COPY		1
#define ERRORACTION_MOVE		2
#define ERRORACTION_DELETE		3

#define ERRORTYPE_RETRY_SKIP_CANCEL				1
#define ERRORTYPE_RETRY_CANCEL					2
#define ERRORTYPE_SKIP_CANCEL					3
#define ERRORTYPE_OK							4
#define ERRORTYPE_OK_SKIP_CANCEL				5
#define ERRORTYPE_SCHEDULE_RETRY_SKIP_CANCEL	6

#define ERRORRESULT_ABORT			0
#define ERRORRESULT_RETRY			1
#define ERRORRESULT_SKIP			2
#define ERRORRESULT_SKIP_ALL		3
#define ERRORRESULT_SCHEDULE		4
#define ERRORRESULT_SCHEDULE_ALL	5
#define ERRORRESULT_OK				6


// ShowRequestDlg data
typedef int (CALLBACK *PFNCHECKINPUTA)(HWND hWnd,LPARAM lParamCheckInput,LPCSTR lpszOrigString,LPCSTR lpszString,LPSTR pszErrorBuf,int cchErrorMax);
typedef int (CALLBACK *PFNCHECKINPUTW)(HWND hWnd,LPARAM lParamCheckInput,LPCWSTR lpszOrigString,LPCWSTR lpszString,LPWSTR pszErrorBuf,int cchErrorMax);

#define CHECKINPUT_REJECT	0
#define CHECKINPUT_ACCEPT	1
#define CHECKINPUT_ASK		2

#ifdef UNICODE
#define PFNCHECKINPUT		PFNCHECKINPUTW
#else
#define PFNCHECKINPUT		PFNCHECKINPUTA
#endif

#define HICON_WARNING					(HICON)-1
#define HICON_ERROR						(HICON)-2
#define HICON_INFO						(HICON)-3

#define BUTTONS_OKA						(LPSTR)1	// Ok
#define BUTTONS_OKCANCELA				(LPSTR)2	// Ok|Cancel
#define BUTTONS_RETRYSKIPA				(LPSTR)3	// Retry|Skip
#define BUTTONS_IGNORECANCELA			(LPSTR)4	// Ignore|Cancel
#define BUTTONS_RETRYSKIPABORTA			(LPSTR)5	// Retry|Skip|Skip All|Abort	
#define BUTTONS_SCHEDULERETRYSKIPABORTA	(LPSTR)6	// Schedule|Schedule All|Retry|Skip|Skip All|Abort
#define BUTTONS_REPLACESKIPABORTA		(LPSTR)7	// Replace|Replace All|Skip|Skip All|Abort
#define BUTTONS_UNPROTECTSKIPABORTA		(LPSTR)8	// Unprotect|Unprotect All|Skip|Skip All|Abort
#define BUTTONS_DELETESKIPABORTA		(LPSTR)9	// Delete|Delete All|Skip|Abort
#define BUTTONS_RETRYABORTA				(LPSTR)10	// Retry|Abort
#define BUTTONS_REPLACESKIPRENAMEABORTA	(LPSTR)11	// Replace|Replace All|Skip|Skip All|Rename|Abort
#define BUTTONS_DELETECANCELA			(LPSTR)12	// Delete|Cancel
#define BUTTONS_SKIPABORTA				(LPSTR)13	// Skip|Skip All|Abort
#define BUTTONS_YESNOA					(LPSTR)14	// Yes|No
#define BUTTONS_REPLACECANCELA			(LPSTR)15	// Replace|Cancel
#define BUTTONS_OKSKIPABORTA			(LPSTR)16	// OK|Skip|Abort
#define BUTTONS_YESSKIPCANCELA			(LPSTR)17	// Yes|Yes To All|Skip|Cancel
#define BUTTONS_RETRYCANCELA			(LPSTR)18	// Retry|Cancel
#define BUTTONS_YESNOCANCELA			(LPSTR)19	// Yes|No|Cancel
#define BUTTONS_RENAMEREPLACESKIPABORTA	(LPSTR)20	// Rename|Replace|Skip|Abort
#define BUTTONS_REPLACERENAMECANCELA	(LPSTR)21	// Replace|Rename|Cancel

#define BUTTONS_OKW						(LPWSTR)BUTTONS_OKA
#define BUTTONS_OKCANCELW				(LPWSTR)BUTTONS_OKCANCELA
#define BUTTONS_RETRYSKIPW				(LPWSTR)BUTTONS_RETRYSKIPA
#define BUTTONS_IGNORECANCELW			(LPWSTR)BUTTONS_IGNORECANCELA
#define BUTTONS_RETRYSKIPABORTW			(LPWSTR)BUTTONS_RETRYSKIPABORTA
#define BUTTONS_SCHEDULERETRYSKIPABORTW	(LPWSTR)BUTTONS_SCHEDULERETRYSKIPABORTA
#define BUTTONS_REPLACESKIPABORTW		(LPWSTR)BUTTONS_REPLACESKIPABORTA
#define BUTTONS_UNPROTECTSKIPABORTW		(LPWSTR)BUTTONS_UNPROTECTSKIPABORTA
#define BUTTONS_DELETESKIPABORTW		(LPWSTR)BUTTONS_DELETESKIPABORTA
#define BUTTONS_RETRYABORTW				(LPWSTR)BUTTONS_RETRYABORTA
#define BUTTONS_REPLACESKIPRENAMEABORTW	(LPWSTR)BUTTONS_REPLACESKIPRENAMEABORTA
#define BUTTONS_DELETECANCELW			(LPWSTR)BUTTONS_DELETECANCELA
#define BUTTONS_SKIPABORTW				(LPWSTR)BUTTONS_SKIPABORTA
#define BUTTONS_YESNOW					(LPWSTR)BUTTONS_YESNOA
#define BUTTONS_REPLACECANCELW			(LPWSTR)BUTTONS_REPLACECANCELA
#define BUTTONS_OKSKIPABORTW			(LPWSTR)BUTTONS_OKSKIPABORTA
#define BUTTONS_YESSKIPCANCELW			(LPWSTR)BUTTONS_YESSKIPCANCELA
#define BUTTONS_RETRYCANCELW			(LPWSTR)BUTTONS_RETRYCANCELA
#define BUTTONS_YESNOCANCELW			(LPWSTR)BUTTONS_YESNOCANCELA
#define BUTTONS_RENAMEREPLACESKIPABORTW	(LPWSTR)BUTTONS_RENAMEREPLACESKIPABORTA
#define BUTTONS_REPLACERENAMECANCELW	(LPWSTR)BUTTONS_REPLACERENAMECANCELA

#ifdef UNICODE
#define BUTTONS_OK						BUTTONS_OKW
#define BUTTONS_OKCANCEL				BUTTONS_OKCANCELW
#define BUTTONS_RETRYSKIP				BUTTONS_RETRYSKIPW
#define BUTTONS_IGNORECANCEL			BUTTONS_IGNORECANCELW
#define BUTTONS_RETRYSKIPABORT			BUTTONS_RETRYSKIPABORTW
#define BUTTONS_SCHEDULERETRYSKIPABORT	BUTTONS_SCHEDULERETRYSKIPABORTW
#define BUTTONS_REPLACESKIPABORT		BUTTONS_REPLACESKIPABORTW
#define BUTTONS_UNPROTECTSKIPABORT		BUTTONS_UNPROTECTSKIPABORTW
#define BUTTONS_DELETESKIPABORT			BUTTONS_DELETESKIPABORTW
#define BUTTONS_RETRYABORT				BUTTONS_RETRYABORTW
#define BUTTONS_REPLACESKIPRENAMEABORT	BUTTONS_REPLACESKIPRENAMEABORTW
#define BUTTONS_DELETECANCEL			BUTTONS_DELETECANCELW
#define BUTTONS_SKIPABORT				BUTTONS_SKIPABORTW
#define BUTTONS_YESNO					BUTTONS_YESNOW
#define BUTTONS_REPLACECANCEL			BUTTONS_REPLACECANCELW
#define BUTTONS_OKSKIPABORT				BUTTONS_OKSKIPABORTW
#define BUTTONS_YESSKIPCANCEL			BUTTONS_YESSKIPCANCELW
#define BUTTONS_RETRYCANCEL				BUTTONS_RETRYCANCELW
#define BUTTONS_YESNOCANCEL				BUTTONS_YESNOCANCELW
#define BUTTONS_RENAMEREPLACESKIPABORT	BUTTONS_RENAMEREPLACESKIPABORTW
#define BUTTONS_REPLACERENAMECANCEL		BUTTONS_REPLACERENAMECANCELW
#else
#define BUTTONS_OK						BUTTONS_OKA
#define BUTTONS_OKCANCEL				BUTTONS_OKCANCELA
#define BUTTONS_RETRYSKIP				BUTTONS_RETRYSKIPA
#define BUTTONS_IGNORECANCEL			BUTTONS_IGNORECANCELA
#define BUTTONS_RETRYSKIPABORT			BUTTONS_RETRYSKIPABORTA
#define BUTTONS_SCHEDULERETRYSKIPABORT	BUTTONS_SCHEDULERETRYSKIPABORTA
#define BUTTONS_REPLACESKIPABORT		BUTTONS_REPLACESKIPABORTA
#define BUTTONS_UNPROTECTSKIPABORT		BUTTONS_UNPROTECTSKIPABORTA
#define BUTTONS_DELETESKIPABORT			BUTTONS_DELETESKIPABORTA
#define BUTTONS_RETRYABORT				BUTTONS_RETRYABORTA
#define BUTTONS_REPLACESKIPRENAMEABORT	BUTTONS_REPLACESKIPRENAMEABORTA
#define BUTTONS_DELETECANCEL			BUTTONS_DELETECANCELA
#define BUTTONS_SKIPABORT				BUTTONS_SKIPABORTA
#define BUTTONS_YESNO					BUTTONS_YESNOA
#define BUTTONS_REPLACECANCEL			BUTTONS_REPLACECANCELA
#define BUTTONS_OKSKIPABORT				BUTTONS_OKSKIPABORTA
#define BUTTONS_YESSKIPCANCEL			BUTTONS_YESSKIPCANCELA
#define BUTTONS_RETRYCANCEL				BUTTONS_RETRYCANCELA
#define BUTTONS_YESNOCANCEL				BUTTONS_YESNOCANCELA
#define BUTTONS_RENAMEREPLACESKIPABORT	BUTTONS_RENAMEREPLACESKIPABORTA
#define BUTTONS_REPLACERENAMECANCEL		BUTTONS_REPLACERENAMECANCELA
#endif

#define SHOWREQF_NAMEFILTER				(1<<0)	// Filter input string for valid filename characters
#define SHOWREQF_SELECTALL				(1<<1)	// Select entire string on init
#define SHOWREQF_PASSWORD				(1<<2)	// Password input
#define SHOWREQF_DEFAULTCANCEL			(1<<3)	// Cancel button default

typedef struct DOpusShowRequestDlgDataA
{
	UINT			cbSize;					// size of structure
	HWND			hwndParent;				// parent window
	LPCSTR			pszTitle;				// dialog title
	HICON			hIcon;					// icon handle
	LPCSTR			pszMessage;				// message text
	LPCSTR			pszButtons;				// buttons (ok|cancel etc)
	LPSTR			pszStringBuf;			// points to buffer for text input
	int				cchStringBufMax;		// maximum size of input buffer
	DWORD			dwFlags;				// flags
	PFNCHECKINPUTA	pfnCheckInputString;	// function to check input string
	LPARAM			lParamCheckInput;		// userdata for callback function
	LPCSTR			pszBoolOption;			// label for boolean option
	BOOL			fBoolOption;			// boolean option state
} SHOWREQUESTDLGDATAA, * LPSHOWREQUESTDLGDATAA;

typedef struct DOpusShowRequestDlgDataW
{
	UINT			cbSize;					// size of structure
	HWND			hwndParent;				// parent window
	LPCWSTR			pszTitle;				// dialog title
	HICON			hIcon;					// icon handle
	LPCWSTR			pszMessage;				// message text
	LPCWSTR			pszButtons;				// buttons (ok|cancel etc)
	LPWSTR			pszStringBuf;			// points to buffer for text input
	int				cchStringBufMax;		// maximum size of input buffer
	DWORD			dwFlags;				// flags
	PFNCHECKINPUTW	pfnCheckInputString;	// function to check input string
	LPARAM			lParamCheckInput;		// userdata for callback function
	LPCWSTR			pszBoolOption;			// label for boolean option
	BOOL			fBoolOption;			// boolean option state
} SHOWREQUESTDLGDATAW, * LPSHOWREQUESTDLGDATAW;

#ifdef UNICODE
#define SHOWREQUESTDLGDATA		SHOWREQUESTDLGDATAW
#define LPSHOWREQUESTDLGDATA	LPSHOWREQUESTDLGDATAW
#else
#define SHOWREQUESTDLGDATA		SHOWREQUESTDLGDATAA
#define LPSHOWREQUESTDLGDATA	LPSHOWREQUESTDLGDATAA
#endif


// ShowFunctionNewNameDlg
#define NEWNAME_ABORT		0
#define NEWNAME_SKIP		1
#define NEWNAME_SIMPLE		2
#define NEWNAME_WILD		3


// ShowFunctionReplaceDlg
#define REPLACEDLGF_RESUME		(1<<0)
#define REPLACEDLGF_NODESTINFO	(1<<1)
#define REPLACEDLGF_READONLY	(1<<2)
#define REPLACEDLGF_NOTHUMBS	(1<<3)
#define REPLACEDLGF_NOIDENTICAL	(1<<4)

#define REPLACERES_ABORT			0
#define REPLACERES_REPLACE			1
#define REPLACERES_REPLACEALL		2
#define REPLACERES_SKIP				3
#define REPLACERES_SKIPALL			4
#define REPLACERES_SKIPIDENTICAL	5
#define REPLACERES_RESUME			6
#define REPLACERES_RESUMEALL		7
#define REPLACERES_RENAME			8


// ShowFunctionInitialDeleteDlg / ShowFunctionDeleteDlg
#define DELETERES_ABORT				0
#define DELETERES_DELETE			1
#define DELETERES_DELETEALL			2
#define DELETERES_SKIP				3


// AddFunctionFileChange
#define OPUSFILECHANGE_CREATE		1
#define OPUSFILECHANGE_DELETE		2
#define OPUSFILECHANGE_CHANGE		3
#define OPUSFILECHANGE_MAKEDIR		4
#define OPUSFILECHANGE_REMDIR		5
#define OPUSFILECHANGE_REFRESH		6


// UpdateFunctionProgressBar
#define PROGRESSACTION_STATUSTEXTA		1
#define PROGRESSACTION_STATUSTEXTW		2
#define PROGRESSACTION_NEXTFILEA		3
#define PROGRESSACTION_NEXTFILEW		4
#define PROGRESSACTION_SETFILENAMEA		5
#define PROGRESSACTION_SETFILENAMEW		6
#define PROGRESSACTION_SETFILESIZE		7
#define PROGRESSACTION_SETFILESIZE64	8
#define PROGRESSACTION_STEPBYTES		9
#define PROGRESSACTION_SETBYTES			10
#define PROGRESSACTION_SETBYTES64		11
#define PROGRESSACTION_SKIPFILE			12
#define PROGRESSACTION_PERCENTMODE		13
#define PROGRESSACTION_SETPERCENT		14
#define PROGRESSACTION_NOPROGRESS		15

#define NOPROGRESSF_BATCHCOPY			(1<<0)
#define NOPROGRESSF_BATCHDELETE			(1<<1)
#define NOPROGRESSF_NOABORT				(1<<2)


#ifdef UNICODE
#define PROGRESSACTION_STATUSTEXT		PROGRESSACTION_STATUSTEXTW
#define PROGRESSACTION_NEXTFILE			PROGRESSACTION_NEXTFILEW
#define PROGRESSACTION_SETFILENAME		PROGRESSACTION_SETFILENAMEW
#else
#define PROGRESSACTION_STATUSTEXT		PROGRESSACTION_STATUSTEXTA
#define PROGRESSACTION_NEXTFILE			PROGRESSACTION_NEXTFILEA
#define PROGRESSACTION_SETFILENAME		PROGRESSACTION_SETFILENAMEA
#endif


// Registry wrappers

typedef void *OPUSREGKEY;

#define OPUSREGKEY_CLASSES_ROOT		((OPUSREGKEY)HKEY_CLASSES_ROOT)
#define OPUSREGKEY_CURRENT_USER		((OPUSREGKEY)HKEY_CURRENT_USER)
#define OPUSREGKEY_LOCAL_MACHINE	((OPUSREGKEY)HKEY_LOCAL_MACHINE)
#define OPUSREGKEY_USERS			((OPUSREGKEY)HKEY_USERS)

#define OPUSREG_ELEVATIONCANCELLED	0
#define OPUSREG_ELEVATED			1
#define OPUSREG_ELEVATIONNOTNEEDED	2


// Button icon imagelist indices
enum
{
	OPUSBUTTONIMAGE_BROWSE,
	OPUSBUTTONIMAGE_CLEAR,
	OPUSBUTTONIMAGE_PLAY,
	OPUSBUTTONIMAGE_STOP,
	OPUSBUTTONIMAGE_START,
	OPUSBUTTONIMAGE_GOBACK,
	OPUSBUTTONIMAGE_DROPDOWN,
	OPUSBUTTONIMAGE_DROPDOWNGHOST,
	OPUSBUTTONIMAGE_ARROWRIGHT,
	OPUSBUTTONIMAGE_ARROWLEFT,
	OPUSBUTTONIMAGE_ARROWUP,
	OPUSBUTTONIMAGE_ARROWDOWN,
	OPUSBUTTONIMAGE_BROWSEDISKS,
	OPUSBUTTONIMAGE_LOCKCLOSED,
	OPUSBUTTONIMAGE_LOCKOPEN,
	OPUSBUTTONIMAGE_ADDRESSBOOK,
	OPUSBUTTONIMAGE_PASTE,
	OPUSBUTTONIMAGE_NEWSTYLE,
	OPUSBUTTONIMAGE_DUPESTYLE,
	OPUSBUTTONIMAGE_RENAMESTYLE,
	OPUSBUTTONIMAGE_DESCSTYLE,
	OPUSBUTTONIMAGE_DELSTYLE,
	OPUSBUTTONIMAGE_MOVEUP,
	OPUSBUTTONIMAGE_MOVEDOWN,
	OPUSBUTTONIMAGE_SORT,
	OPUSBUTTONIMAGE_FILTER,
	OPUSBUTTONIMAGE_NEWFOLDER,
	OPUSBUTTONIMAGE_EDIT,
	OPUSBUTTONIMAGE_CHANGEKEY,
	OPUSBUTTONIMAGE_LOAD,
	OPUSBUTTONIMAGE_SAVE,
	OPUSBUTTONIMAGE_OPENTYPE,
	OPUSBUTTONIMAGE_TRUETYPE,
	OPUSBUTTONIMAGE_REFRESH,
	OPUSBUTTONIMAGE_SEPARATOR,
	OPUSBUTTONIMAGE_ABOUT,
	OPUSBUTTONIMAGE_HELP,
	OPUSBUTTONIMAGE_GDS,
	OPUSBUTTONIMAGE_CONNECT,

	OPUSBUTTONIMAGE_COUNT
};


// Thumbnail cache control
typedef struct ThumbCacheControlData
{
	UINT		cbSize;					// set to size of structure before calling function
	int			iOperation;				// one of the valid TCCOP_xxx operations
	LPWSTR		pszPath;				// path to empty cache for or NULL for all paths
	LPWSTR		pszFileNamePattern;		// filename pattern to empty from cache or NULL for all files
	HANDLE		hEvent;					// event to signal on completion or NULL if not needed
	DWORD		dwFlags;				// flags
	DWORDLONG	dwlCacheSize;			// returns size of cache for TCCOP_GETSIZE
} THUMBCACHECONTROLDATA, * LPTHUMBCACHECONTROLDATA;

#define TCCOP_GETSIZE		1			// get total cache size
#define TCCOP_EMPTY			2			// empty cache (all, specific folder or specific file(s))
#define TCCOP_COMPACT		3			// compact cache (not implemented)

#define TCCF_REGENERATE			(1<<0)	// regenerate thumbs for any currently displayed affected files
#define TCCF_NUKELEGACYTHUMBS	(1<<1)	// delete any legacy thumbnails found
#define TCCF_REGENERATEONLY		(1<<2)	// do not delete anything from the thumbnail cache; just ask all open thumbnail windows to refresh their thumbnails. Useful if your thumbnails are never cached (DVPFIF_NoCache) and you wish to pass NULL for pszPath and pszFileNamePattern.

// Dialog resize helper
typedef struct DlgResizerControl
{
	DWORD		dwFlags;
	UINT_PTR	idCtl;
} DLGRESIZERCONTROL, * LPDLGRESIZERCONTROL;

#define DlgResizerF_Right			(1<<2)	// Position relative to right side
#define DlgResizerF_Width			(1<<3)	// Width relative to width
#define DlgResizerF_Bottom			(1<<4)	// Position relative to bottom side
#define DlgResizerF_Height			(1<<5)	// Height relative to height
#define DlgResizerF_Window			(1<<7)	// Window rather than control ID
#define DlgResizerF_DiffParent		(1<<9)	// Control has a different parent window
#define DlgResizerF_NewParent		(1<<10)	// Specify a new parent window for subsequent items
#define DlgResizerF_Previous		(1<<16)	// Previous resizer to link to



// Glyph sets
#define OPUSGLYPHSET_NC				0
#define OPUSGLYPHSET_TREELOCK		1
#define OPUSGLYPHSET_FDB			2
#define OPUSGLYPHSET_TOOLBAR		3
#define OPUSGLYPHSET_MENU			4
#define OPUSGLYPHSET_CHECKS			5
#define OPUSGLYPHSET_FLATLIST		6
#define OPUSGLYPHSET_ARROWS			7

// Non-client glyphs
#define OPUSGLYPH_NC_BACK			0
#define OPUSGLYPH_NC_FWD			1
#define OPUSGLYPH_NC_UP				2
#define OPUSGLYPH_NC_VERT			3
#define OPUSGLYPH_NC_HORZ			4
#define OPUSGLYPH_NC_ZOOM			5
#define OPUSGLYPH_NC_PININ			6
#define OPUSGLYPH_NC_PINOUT			7
#define OPUSGLYPH_NC_PINRIGHTIN		8
#define OPUSGLYPH_NC_ROTATELEFT		9
#define OPUSGLYPH_NC_ROTATERIGHT	10
#define OPUSGLYPH_NC_ZOOMIN			11
#define OPUSGLYPH_NC_ZOOMOUT		12
#define OPUSGLYPH_NC_ZOOMORIGINAL	13
#define OPUSGLYPH_NC_ZOOMFIT		14
#define OPUSGLYPH_NC_CLOSE			15
#define OPUSGLYPH_NC_SHRINKDOWN		16
#define OPUSGLYPH_NC_SHRINKUP		17
#define OPUSGLYPH_NC_SHRINKRIGHT	18
#define OPUSGLYPH_NC_SHRINKLEFT		19
#define OPUSGLYPH_NC_CHECKMARK		20

// Tree lock glyphs
#define OPUSGLYPH_TREELOCK_CLOSED	0
#define OPUSGLYPH_TREELOCK_OPEN		1

// File display border glyphs
#define OPUSGLYPH_FDB_BACK			0
#define OPUSGLYPH_FDB_FWD			1
#define OPUSGLYPH_FDB_UP			2
#define OPUSGLYPH_FDB_VERT			3
#define OPUSGLYPH_FDB_HORZ			4
#define OPUSGLYPH_FDB_COPYLEFT		5
#define OPUSGLYPH_FDB_COPYRIGHT		6
#define OPUSGLYPH_FDB_COPYUP		7
#define OPUSGLYPH_FDB_COPYDOWN		8
#define OPUSGLYPH_FDB_SWAPHORZ		9
#define OPUSGLYPH_FDB_SWAPVERT		10
#define OPUSGLYPH_FDB_CLOSE			11

// Toolbar glyphs
#define OPUSGLYPH_TOOLBAR_LEFT		0
#define OPUSGLYPH_TOOLBAR_RIGHT		1
#define OPUSGLYPH_TOOLBAR_MENU		2
#define OPUSGLYPH_TOOLBAR_UP		3
#define OPUSGLYPH_TOOLBAR_DOWN		4
#define OPUSGLYPH_TOOLBAR_MORE		5
#define OPUSGLYPH_TOOLBAR_POPOUT	6
#define OPUSGLYPH_TOOLBAR_MORELEFT	7

// Menu glyphs
#define OPUSGLYPH_MENU_BULLET		0
#define OPUSGLYPH_MENU_CHECK		1

// Check glyphs
#define OPUSGLYPH_CHECK_CHECK		0
#define OPUSGLYPH_CHECK_RIGHT		1
#define OPUSGLYPH_CHECK_LEFT		2
#define OPUSGLYPH_CHECK_DOWN		3
#define OPUSGLYPH_CHECK_UP			4
#define OPUSGLYPH_CHECK_CROSS		5

// Flat list glyphs
#define OPUSGLYPH_FLATLIST_CLOSED	0
#define OPUSGLYPH_FLATLIST_OPEN		1
#define OPUSGLYPH_FLATLIST_CHECK	2

// Arrow glyphs
#define OPUSGLYPH_ARROW_DOWN		0
#define OPUSGLYPH_ARROW_UP			1
#define OPUSGLYPH_ARROW_RIGHT		2
#define OPUSGLYPH_ARROW_LEFT		3


// Glyph-drawing flags
#define OPUSGLYPHDRAW_3D			0x01
#define OPUSGLYPHDRAW_DISABLE		0x02
#define OPUSGLYPHDRAW_3DSOLID		0x05
#define OPUSGLYPHDRAW_BLEND			0x08



// Hash functions
enum HashType
{
	HashType_MD5,
	HashType_SHA,
};

enum HashOutput
{
	HashOutput_Binary,
	HashOutput_ASCII,
	HashOutput_Unicode,
};


// LoadImage function
enum DOLoadImageFlags
{
	DOLIF_FromFileA		= 1<<0,
	DOLIF_FromFileW		= 1<<1,
	DOLIF_FromStream	= 1<<2,
	DOLIF_FromData		= 1<<3,
	DOLIF_NoPlugins		= 1<<4,
};

typedef struct _DOLoadImageData
{
	UINT				cbSize;
	union
	{
		LPSTR			pszFileA;
		LPWSTR			pszFileW;
		LPSTREAM		pStm;
		LPVOID			pData;
	};
	DOLoadImageFlags	dwFlags;
	SIZE_T				dwDataSize;
	HWND				hWnd;
	HANDLE				hAbortEvent;

	BITMAPINFOHEADER	bmh;
	HBITMAP				hBmpImage;
	LPVOID				pBits;
} DOLoadImageData;


/*********************************************************************************/

typedef BOOL (*PFNDOPUSCHOOSEFONTA)(HWND hWnd,LPDOPUSCHOOSEFONTA lpChoose);
typedef BOOL (*PFNDOPUSCHOOSEFONTW)(HWND hWnd,LPDOPUSCHOOSEFONTW lpChoose);
typedef BOOL (*PFNGETCONFIGPATHA)(int iPathType,LPSTR pszBuf,UINT cchMax);
typedef BOOL (*PFNGETCONFIGPATHW)(int iPathType,LPWSTR pszBuf,UINT cchMax);
typedef BOOL (*PFNLOADORSAVECONFIGA)(int iOperation,LPDOPUSPLUGINCONFIGDATAA lpCfgData);
typedef BOOL (*PFNLOADORSAVECONFIGW)(int iOperation,LPDOPUSPLUGINCONFIGDATAW lpCfgData);
typedef BOOL (*PFNGETTHUMBNAILPREFS)(LPDOPUSTHUMBNAILPREFSDATA lpThumbData);
typedef HANDLE (*PFNXMLLOADFILEA)(LPCSTR pszFile);
typedef HANDLE (*PFNXMLLOADFILEW)(LPCWSTR pszFile);
typedef HANDLE (*PFNXMLLOADDATA)(LPCVOID pData,DWORD dwSize);
typedef BOOL (*PFNXMLSAVEFILEA)(HANDLE hXML,LPCSTR pszFile);
typedef BOOL (*PFNXMLSAVEFILEW)(HANDLE hXML,LPCWSTR pszFile);
typedef BOOL (*PFNXMLSAVEDATA)(HANDLE hXML,LPWSTR *pszOutFreeViaCTMA);
typedef HANDLE (*PFNXMLCREATEFILE)();
typedef void (*PFNXMLFREEFILE)(HANDLE hXML);
typedef HANDLE (*PFNXMLADDCHILDNODEA)(HANDLE hXML,LPCSTR pszName);
typedef HANDLE (*PFNXMLADDCHILDNODEW)(HANDLE hXML,LPCWSTR pszName);
typedef HANDLE (*PFNXMLFINDCHILDNODEA)(HANDLE hXML,LPCSTR pszName);
typedef HANDLE (*PFNXMLFINDCHILDNODEW)(HANDLE hXML,LPCWSTR pszName);
typedef HANDLE (*PFNXMLENUMCHILDNODESA)(HANDLE hXML,LPCSTR pszName,HANDLE hPrev);
typedef HANDLE (*PFNXMLENUMCHILDNODESW)(HANDLE hXML,LPCWSTR pszName,HANDLE hPrev);
typedef HANDLE (*PFNXMLFIRSTCHILDNODE)(HANDLE hXML);
typedef HANDLE (*PFNXMLNEXTNODE)(HANDLE hXML);
typedef BOOL (*PFNXMLDELETECHILD)(HANDLE hXML,HANDLE hChild);
typedef BOOL (*PFNXMLDELETEALLCHILDNODES)(HANDLE hXML);
typedef BOOL (*PFNXMLGETNODENAMEA)(HANDLE hXML,LPSTR pszName,LPINT pcchMax);
typedef BOOL (*PFNXMLGETNODENAMEW)(HANDLE hXML,LPWSTR pszName,LPINT pcchMax);
typedef BOOL (*PFNXMLSETNODENAMEA)(HANDLE hXML,LPCSTR pszName);
typedef BOOL (*PFNXMLSETNODENAMEW)(HANDLE hXML,LPCWSTR pszName);
typedef BOOL (*PFNXMLGETNODEVALUEA)(HANDLE hXML,LPSTR pszValue,LPINT pcchMax);
typedef BOOL (*PFNXMLGETNODEVALUEW)(HANDLE hXML,LPWSTR pszValue,LPINT pcchMax);
typedef BOOL (*PFNXMLSETNODEVALUEA)(HANDLE hXML,LPCSTR pszValue);
typedef BOOL (*PFNXMLSETNODEVALUEW)(HANDLE hXML,LPCWSTR pszValue);
typedef BOOL (*PFNXMLGETNODEBOOLVALUE)(HANDLE hXML,LPBOOL pfValue);
typedef BOOL (*PFNXMLSETNODEBOOLVALUE)(HANDLE hXML,BOOL fValue);
typedef BOOL (*PFNXMLGETNODEINTVALUE)(HANDLE hXML,LPINT piValue);
typedef BOOL (*PFNXMLSETNODEINTVALUE)(HANDLE hXML,INT iValue);
typedef BOOL (*PFNXMLGETNODEDWORDVALUE)(HANDLE hXML,LPDWORD pdwValue);
typedef BOOL (*PFNXMLSETNODEDWORDVALUE)(HANDLE hXML,DWORD dwValue);
typedef BOOL (*PFNXMLGETNODEDWORDLONGVALUE)(HANDLE hXML,PDWORDLONG pdwlValue);
typedef BOOL (*PFNXMLSETNODEDWORDLONGVALUE)(HANDLE hXML,DWORDLONG dwlValue);
typedef BOOL (*PFNXMLGETNODELOGFONTVALUEA)(HANDLE hXML,LPLOGFONTA plfValue);
typedef BOOL (*PFNXMLGETNODELOGFONTVALUEW)(HANDLE hXML,LPLOGFONTW plfValue);
typedef BOOL (*PFNXMLSETNODELOGFONTVALUEA)(HANDLE hXML,const LOGFONTA *plfValue);
typedef BOOL (*PFNXMLSETNODELOGFONTVALUEW)(HANDLE hXML,const LOGFONTW *plfValue);
typedef BOOL (*PFNXMLGETNODEBINARYVALUE)(HANDLE hXML,LPVOID pValue,LPDWORD pdwSize);
typedef BOOL (*PFNXMLSETNODEBINARYVALUE)(HANDLE hXML,LPVOID pValue,DWORD pdwSize);
typedef BOOL (*PFNXMLGETNODEATTRIBUTEA)(HANDLE hXML,LPCSTR pszAttrName,LPSTR pszAttrValue,LPINT pcchMax);
typedef BOOL (*PFNXMLGETNODEATTRIBUTEW)(HANDLE hXML,LPCWSTR pszAttrName,LPWSTR pszAttrValue,LPINT pcchMax);
typedef BOOL (*PFNXMLSETNODEATTRIBUTEA)(HANDLE hXML,LPCSTR pszAttrName,LPCSTR pszAttrValue);
typedef BOOL (*PFNXMLSETNODEATTRIBUTEW)(HANDLE hXML,LPCWSTR pszAttrName,LPCWSTR pszAttrValue);
typedef BOOL (*PFNXMLGETNODEBOOLATTRIBUTEA)(HANDLE hXML,LPCSTR pszAttrName,LPBOOL pfAttrValue);
typedef BOOL (*PFNXMLGETNODEBOOLATTRIBUTEW)(HANDLE hXML,LPCWSTR pszAttrName,LPBOOL pfAttrValue);
typedef BOOL (*PFNXMLSETNODEBOOLATTRIBUTEA)(HANDLE hXML,LPCSTR pszAttrName,BOOL fAttrValue);
typedef BOOL (*PFNXMLSETNODEBOOLATTRIBUTEW)(HANDLE hXML,LPCWSTR pszAttrName,BOOL fAttrValue);
typedef BOOL (*PFNXMLGETNODEINTATTRIBUTEA)(HANDLE hXML,LPCSTR pszAttrName,LPINT piAttrValue);
typedef BOOL (*PFNXMLGETNODEINTATTRIBUTEW)(HANDLE hXML,LPCWSTR pszAttrName,LPINT piAttrValue);
typedef BOOL (*PFNXMLSETNODEINTATTRIBUTEA)(HANDLE hXML,LPCSTR pszAttrName,INT iAttrValue);
typedef BOOL (*PFNXMLSETNODEINTATTRIBUTEW)(HANDLE hXML,LPCWSTR pszAttrName,INT iAttrValue);
typedef BOOL (*PFNXMLGETNODEDWORDATTRIBUTEA)(HANDLE hXML,LPCSTR pszAttrName,LPDWORD pdwAttrValue);
typedef BOOL (*PFNXMLGETNODEDWORDATTRIBUTEW)(HANDLE hXML,LPCWSTR pszAttrName,LPDWORD pdwAttrValue);
typedef BOOL (*PFNXMLSETNODEDWORDATTRIBUTEA)(HANDLE hXML,LPCSTR pszAttrName,DWORD dwAttrValue);
typedef BOOL (*PFNXMLSETNODEDWORDATTRIBUTEW)(HANDLE hXML,LPCWSTR pszAttrName,DWORD dwAttrValue);
typedef BOOL (*PFNXMLGETNODEDWORDLONGATTRIBUTEA)(HANDLE hXML,LPCSTR pszAttrName,PDWORDLONG pdwlAttrValue);
typedef BOOL (*PFNXMLGETNODEDWORDLONGATTRIBUTEW)(HANDLE hXML,LPCWSTR pszAttrName,PDWORDLONG pdwlAttrValue);
typedef BOOL (*PFNXMLSETNODEDWORDLONGATTRIBUTEA)(HANDLE hXML,LPCSTR pszAttrName,DWORDLONG dwlAttrValue);
typedef BOOL (*PFNXMLSETNODEDWORDLONGATTRIBUTEW)(HANDLE hXML,LPCWSTR pszAttrName,DWORDLONG dwlAttrValue);
typedef BOOL (*PFNXMLDELETENODEATTRIBUTEA)(HANDLE hXML,LPCSTR pszAttrName);
typedef BOOL (*PFNXMLDELETENODEATTRIBUTEW)(HANDLE hXML,LPCWSTR pszAttrName);
typedef BOOL (*PFNXMLDELETEALLNODEATTRIBUTES)(HANDLE hXML);
typedef int (*PFNSHOWREQUESTDLGA)(LPSHOWREQUESTDLGDATAA lpDlgData);
typedef int (*PFNSHOWREQUESTDLGW)(LPSHOWREQUESTDLGDATAW lpDlgData);
typedef int (*PFNSHOWFUNCTIONNEWNAMEDLGA)(LPVOID lpFuncData,LPSTR lpszOldName,int cchOldNameMax,LPSTR lpszNewName,int cchNewNameMax,BOOL fMove);
typedef int (*PFNSHOWFUNCTIONNEWNAMEDLGW)(LPVOID lpFuncData,LPWSTR lpszOldName,int cchOldNameMax,LPWSTR lpszNewName,int cchNewNameMax,BOOL fMove);
typedef BOOL (*PFNGETWILDNEWNAMEA)(LPCSTR lpszOldPattern,LPCSTR lpszNewPattern,LPCSTR lpszFileName,LPSTR lpszNewName,int cchNewNameMax);
typedef BOOL (*PFNGETWILDNEWNAMEW)(LPCWSTR lpszOldPattern,LPCWSTR lpszNewPattern,LPCWSTR lpszFileName,LPWSTR lpszNewName,int cchNewNameMax);
typedef int (*PFNSHOWFUNCTIONERRORDLGA)(LPVOID lpFuncData,UINT uiType,int iErrorCode,UINT uiAction,LPCSTR lpszName,LPCSTR lpszErrMsg);
typedef int (*PFNSHOWFUNCTIONERRORDLGW)(LPVOID lpFuncData,UINT uiType,int iErrorCode,UINT uiAction,LPCWSTR lpszName,LPCWSTR lpszErrMsg);
typedef int (*PFNSHOWFUNCTIONREPLACEDLGA)(LPVOID lpFuncData,LPCSTR pszSource,const WIN32_FIND_DATAA *pwfdSource,LPCSTR pszDest,const WIN32_FIND_DATAA *pwfdDest,LPSTR pszNewName,int cchNewNameMax,DWORD dwFlags);
typedef int (*PFNSHOWFUNCTIONREPLACEDLGW)(LPVOID lpFuncData,LPCWSTR pszSource,const WIN32_FIND_DATAW *pwfdSource,LPCWSTR pszDest,const WIN32_FIND_DATAW *pwfdDest,LPWSTR pszNewName,int cchNewNameMax,DWORD dwFlags);
typedef int (*PFNSHOWFUNCTIONINITIALDELETEDLGA)(LPVOID lpFuncData,LPCSTR pszFileName);
typedef int (*PFNSHOWFUNCTIONINITIALDELETEDLGW)(LPVOID lpFuncData,LPCWSTR pszFileName);
typedef int (*PFNSHOWFUNCTIONDELETEDLGA)(LPVOID lpFuncData,LPCSTR pszFileName,BOOL fFolder,DWORD dwFileCount,DWORD dwFileSizeHigh,DWORD dwFileSizeLow);
typedef int (*PFNSHOWFUNCTIONDELETEDLGW)(LPVOID lpFuncData,LPCWSTR pszFileName,BOOL fFolder,DWORD dwFileCount,DWORD dwFileSizeHigh,DWORD dwFileSizeLow);
typedef BOOL (*PFNFILTERFUNCTIONFILEA)(LPVOID lpFuncData,LPCSTR lpszFile,const WIN32_FIND_DATAA *lpWFD,BOOL fSubFolderFilter);
typedef BOOL (*PFNFILTERFUNCTIONFILEW)(LPVOID lpFuncData,LPCWSTR lpszFile,const WIN32_FIND_DATAW *lpWFD,BOOL fSubFolderFilter);
typedef void (*PFNADDFUNCTIONFILECHANGEA)(LPVOID lpFuncData,BOOL fIsDest,int iType,LPCSTR lpszFile);
typedef void (*PFNADDFUNCTIONFILECHANGEW)(LPVOID lpFuncData,BOOL fIsDest,int iType,LPCWSTR lpszFile);
typedef void (*PFNUPDATEFUNCTIONPROGRESSBAR)(LPVOID lpFuncData,UINT uiAction,DWORD_PTR dwData);
typedef BOOL (*PFNISUSBINSTALL)(void);
typedef BOOL (*PFNDRAWPICTUREFRAMEINDIB)(const BITMAPINFO* pBMI,LPVOID pBits,const RECT *prc,int iFrameSize,int iShadowSize);
typedef HWND (*PFNGETFUNCTIONWINDOW)(LPVOID lpFuncData);
typedef DWORD (*PFNCALCCRC32)(DWORD dwCRCIn,LPCBYTE pData,DWORD dwSize);
typedef BOOL (*PFNGETPROGRAMDIRA)(LPSTR pszBuf,int cchBufSize);
typedef BOOL (*PFNGETPROGRAMDIRW)(LPWSTR pszBuf,int cchBufSize);
typedef LONG (*PFNOPUSREGOPENKEYW)(OPUSREGKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired,OPUSREGKEY* phkResult);
typedef LONG (*PFNOPUSREGCREATEKEYW)(OPUSREGKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired,OPUSREGKEY* phkResult);
typedef LONG (*PFNOPUSREGQUERYVALUEW)(OPUSREGKEY phKey,LPCWSTR lpValueName,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData);
typedef LONG (*PFNOPUSREGCLOSEKEY)(OPUSREGKEY phKey);
typedef LONG (*PFNOPUSREGDELETEKEYW)(OPUSREGKEY phKey,LPCWSTR lpSubKey);
typedef LONG (*PFNOPUSREGDELETEVALUEW)(OPUSREGKEY phKey,LPCWSTR lpValueName);
typedef LONG (*PFNOPUSREGSETVALUEW)(OPUSREGKEY phKey,LPCWSTR lpValueName,DWORD dwType,LPCBYTE lpData,DWORD cbData);
typedef LONG (*PFNOPUSREGCHECKELEVATION)(OPUSREGKEY phKey,HWND hWnd);
typedef HANDLE (*PFNDISABLEWOW64REDIRECTION)(void);
typedef void (*PFNREVERTWOW64REDIRECTION)(HANDLE hHandle);
typedef HIMAGELIST (*PFNCREATEBUTTONICONS)(void);
typedef BOOL (*PFNTHUMBNAILCACHECONTROL)(LPTHUMBCACHECONTROLDATA pData);
typedef HANDLE (*PFNCREATEDIALOGRESIZER)(HWND hWnd,int iNumCtls,LPDLGRESIZERCONTROL pCtls);
typedef BOOL (*PFNADDDIALOGRESIZERCTL)(HANDLE hResizer,HWND hWnd,DWORD dwFlags,UINT_PTR idCtl);
typedef BOOL (*PFNHANDLEDIALOGRESIZERMSG)(HANDLE hResizer,HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam);
typedef void (*PFNFREEDIALOGRESIZER)(HANDLE hResizer);
typedef DWORD (*PFNGETGLYPHSIZE)(int iSet,LPSIZE psz);
typedef void (*PFNDRAWGLYPH)(int iSet,int iGlyph,HDC hDC,LPCRECT prc,DWORD dwFlags,COLORREF crSolid);
typedef SIZE_T (*PFNGETSTRING)(UINT uiMsgId,LPWSTR* pszStrBuf,SIZE_T cchBufSize);
typedef LPCDLGTEMPLATE (*PFNGETLANGDLG)(LPWSTR lpszID,LPDWORD lpdwSize);
typedef HWND (*PFNCREATELANGDLG)(HINSTANCE hInstance,LPWSTR lpszID,HWND hWndParent,DLGPROC pfnDlgProc,DWORD_PTR dwParam);
typedef INT_PTR (*PFNLANGDLGBOX)(HINSTANCE hInstance,LPWSTR lpszID,HWND hWndParent,DLGPROC pfnDlgProc,DWORD_PTR dwParam);
typedef HANDLE (*PFNHASHINIT)(HashType type);
typedef void (*PFNHASHCHUNK)(HANDLE hHash,LPCBYTE pbData,UINT cbData);
typedef LPVOID (*PFNHASHEND)(HANDLE hHash,HashOutput type,UINT* pcbSize);
typedef void (*PFNHASHFREE)(HANDLE hHash);
typedef BOOL (*PFNDOLOADIMAGE)(DOLoadImageData* pData);


#ifdef UNICODE

#define FUNCNAME_DOPUSCHOOSEFONT				"DOpusChooseFontW"
#define FUNCNAME_GETCONFIGPATH					"GetConfigPathW"
#define FUNCNAME_LOADORSAVECONFIG				"LoadOrSaveConfigW"
#define FUNCNAME_XMLLOADFILE					"XMLLoadFileW"
#define FUNCNAME_XMLSAVEFILE					"XMLSaveFileW"
#define FUNCNAME_XMLADDCHILDNODE				"XMLAddChildNodeW"
#define FUNCNAME_XMLFINDCHILDNODE				"XMLFindChildNodeW"
#define FUNCNAME_XMLENUMCHILDNODES				"XMLEnumChildNodesW"
#define FUNCNAME_XMLGETNODENAME					"XMLGetNodeNameW"
#define FUNCNAME_XMLSETNODENAME					"XMLSetNodeNameW"
#define FUNCNAME_XMLGETNODEVALUE				"XMLGetNodeValueW"
#define FUNCNAME_XMLSETNODEVALUE				"XMLSetNodeValueW"
#define FUNCNAME_XMLGETNODELOGFONTVALUE			"XMLGetNodeLOGFONTValueW"
#define FUNCNAME_XMLSETNODELOGFONTVALUE			"XMLSetNodeLOGFONTValueW"
#define FUNCNAME_XMLGETNODEATTRIBUTE			"XMLGetNodeAttributeW"
#define FUNCNAME_XMLSETNODEATTRIBUTE			"XMLSetNodeAttributeW"
#define FUNCNAME_XMLGETNODEBOOLATTRIBUTE		"XMLGetNodeBoolAttributeW"
#define FUNCNAME_XMLSETNODEBOOLATTRIBUTE		"XMLSetNodeBoolAttributeW"
#define FUNCNAME_XMLGETNODEINTATTRIBUTE			"XMLGetNodeIntAttributeW"
#define FUNCNAME_XMLSETNODEINTATTRIBUTE			"XMLSetNodeIntAttributeW"
#define FUNCNAME_XMLGETNODEDWORDATTRIBUTE		"XMLGetNodeDWORDAttributeW"
#define FUNCNAME_XMLSETNODEDWORDATTRIBUTE		"XMLSetNodeDWORDAttributeW"
#define FUNCNAME_XMLGETNODEDWORDLONGATTRIBUTE	"XMLGetNodeDWORDLONGAttributeW"
#define FUNCNAME_XMLSETNODEDWORDLONGATTRIBUTE	"XMLSetNodeDWORDLONGAttributeW"
#define FUNCNAME_XMLDELETENODEATTRIBUTE			"XMLDeleteNodeAttributeW"
#define FUNCNAME_SHOWREQUESTDLG					"ShowRequestDlgW"
#define FUNCNAME_SHOWFUNCTIONNEWNAMEDLG			"ShowFunctionNewNameDlgW"
#define FUNCNAME_GETWILDNEWNAME					"GetWildNewNameW"
#define FUNCNAME_SHOWFUNCTIONERRORDLG			"ShowFunctionErrorDlgW"
#define FUNCNAME_SHOWFUNCTIONREPLACEDLG			"ShowFunctionReplaceDlgW"
#define FUNCNAME_SHOWFUNCTIONINITIALDELETEDLG	"ShowFunctionInitialDeleteDlgW"
#define FUNCNAME_SHOWFUNCTIONDELETEDLG			"ShowFunctionDeleteDlgW"
#define FUNCNAME_FILTERFUNCTIONFILE				"FilterFunctionFileW"
#define FUNCNAME_ADDFUNCTIONFILECHANGE			"AddFunctionFileChangeW"
#define FUNCNAME_GETPROGRAMDIR					"GetProgramDirW"

#define PFNDOPUSCHOOSEFONT						PFNDOPUSCHOOSEFONTW
#define PFNGETCONFIGPATH						PFNGETCONFIGPATHW
#define PFNLOADORSAVECONFIG						PFNLOADORSAVECONFIGW
#define PFNXMLLOADFILE							PFNXMLLOADFILEW
#define PFNXMLSAVEFILE							PFNXMLSAVEFILEW
#define PFNXMLADDCHILDNODE						PFNXMLADDCHILDNODEW
#define PFNXMLFINDCHILDNODE						PFNXMLFINDCHILDNODEW
#define PFNXMLENUMCHILDNODES					PFNXMLENUMCHILDNODESW
#define PFNXMLGETNODENAME						PFNXMLGETNODENAMEW
#define PFNXMLSETNODENAME						PFNXMLSETNODENAMEW
#define PFNXMLGETNODEVALUE						PFNXMLGETNODEVALUEW
#define PFNXMLSETNODEVALUE						PFNXMLSETNODEVALUEW
#define PFNXMLGETNODELOGFONTVALUE				PFNXMLGETNODELOGFONTVALUEW
#define PFNXMLSETNODELOGFONTVALUE				PFNXMLSETNODELOGFONTVALUEW
#define PFNXMLGETNODEATTRIBUTE					PFNXMLGETNODEATTRIBUTEW
#define PFNXMLSETNODEATTRIBUTE					PFNXMLSETNODEATTRIBUTEW
#define PFNXMLGETNODEBOOLATTRIBUTE				PFNXMLGETNODEBOOLATTRIBUTEW
#define PFNXMLSETNODEBOOLATTRIBUTE				PFNXMLSETNODEBOOLATTRIBUTEW
#define PFNXMLGETNODEINTATTRIBUTE				PFNXMLGETNODEINTATTRIBUTEW
#define PFNXMLSETNODEINTATTRIBUTE				PFNXMLSETNODEINTATTRIBUTEW
#define PFNXMLGETNODEDWORDATTRIBUTE				PFNXMLGETNODEDWORDATTRIBUTEW
#define PFNXMLSETNODEDWORDATTRIBUTE				PFNXMLSETNODEDWORDATTRIBUTEW
#define PFNXMLGETNODEDWORDLONGATTRIBUTE			PFNXMLGETNODEDWORDLONGATTRIBUTEW
#define PFNXMLSETNODEDWORDLONGATTRIBUTE			PFNXMLSETNODEDWORDLONGATTRIBUTEW
#define PFNXMLDELETENODEATTRIBUTE				PFNXMLDELETENODEATTRIBUTEW
#define PFNSHOWREQUESTDLG						PFNSHOWREQUESTDLGW
#define PFNSHOWFUNCTIONNEWNAMEDLG				PFNSHOWFUNCTIONNEWNAMEDLGW
#define PFNGETWILDNEWNAME						PFNGETWILDNEWNAMEW
#define PFNSHOWFUNCTIONERRORDLG					PFNSHOWFUNCTIONERRORDLGW
#define PFNSHOWFUNCTIONREPLACEDLG				PFNSHOWFUNCTIONREPLACEDLGW
#define PFNSHOWFUNCTIONINITIALDELETEDLG			PFNSHOWFUNCTIONINITIALDELETEDLGW
#define PFNSHOWFUNCTIONDELETEDLG				PFNSHOWFUNCTIONDELETEDLGW
#define PFNFILTERFUNCTIONFILE					PFNFILTERFUNCTIONFILEW
#define PFNADDFUNCTIONFILECHANGE				PFNADDFUNCTIONFILECHANGEW
#define PFNGETPROGRAMDIR						PFNGETPROGRAMDIRW

#else

#define FUNCNAME_DOPUSCHOOSEFONT				"DOpusChooseFontA"
#define FUNCNAME_GETCONFIGPATH					"GetConfigPathA"
#define FUNCNAME_LOADORSAVECONFIG				"LoadOrSaveConfigA"
#define FUNCNAME_XMLLOADFILE					"XMLLoadFileA"
#define FUNCNAME_XMLSAVEFILE					"XMLSaveFileA"
#define FUNCNAME_XMLADDCHILDNODE				"XMLAddChildNodeA"
#define FUNCNAME_XMLFINDCHILDNODE				"XMLFindChildNodeA"
#define FUNCNAME_XMLENUMCHILDNODES				"XMLEnumChildNodesA"
#define FUNCNAME_XMLGETNODENAME					"XMLGetNodeNameA"
#define FUNCNAME_XMLSETNODENAME					"XMLSetNodeNameA"
#define FUNCNAME_XMLGETNODEVALUE				"XMLGetNodeValueA"
#define FUNCNAME_XMLSETNODEVALUE				"XMLSetNodeValueA"
#define FUNCNAME_XMLGETNODELOGFONTVALUE			"XMLGetNodeLOGFONTValueA"
#define FUNCNAME_XMLSETNODELOGFONTVALUE			"XMLSetNodeLOGFONTValueA"
#define FUNCNAME_XMLGETNODEATTRIBUTE			"XMLGetNodeAttributeA"
#define FUNCNAME_XMLSETNODEATTRIBUTE			"XMLSetNodeAttributeA"
#define FUNCNAME_XMLGETNODEBOOLATTRIBUTE		"XMLGetNodeBoolAttributeA"
#define FUNCNAME_XMLSETNODEBOOLATTRIBUTE		"XMLSetNodeBoolAttributeA"
#define FUNCNAME_XMLGETNODEINTATTRIBUTE			"XMLGetNodeIntAttributeA"
#define FUNCNAME_XMLSETNODEINTATTRIBUTE			"XMLSetNodeIntAttributeA"
#define FUNCNAME_XMLGETNODEDWORDATTRIBUTE		"XMLGetNodeDWORDAttributeA"
#define FUNCNAME_XMLSETNODEDWORDATTRIBUTE		"XMLSetNodeDWORDAttributeA"
#define FUNCNAME_XMLGETNODEDWORDLONGATTRIBUTE	"XMLGetNodeDWORDLONGAttributeA"
#define FUNCNAME_XMLSETNODEDWORDLONGATTRIBUTE	"XMLSetNodeDWORDLONGAttributeA"
#define FUNCNAME_XMLDELETENODEATTRIBUTE			"XMLDeleteNodeAttributeA"
#define FUNCNAME_SHOWREQUESTDLG					"ShowRequestDlgA"
#define FUNCNAME_SHOWFUNCTIONNEWNAMEDLG			"ShowFunctionNewNameDlgA"
#define FUNCNAME_GETWILDNEWNAME					"GetWildNewNameA"
#define FUNCNAME_SHOWFUNCTIONERRORDLG			"ShowFunctionErrorDlgA"
#define FUNCNAME_SHOWFUNCTIONREPLACEDLG			"ShowFunctionReplaceDlgA"
#define FUNCNAME_SHOWFUNCTIONINITIALDELETEDLG	"ShowFunctionInitialDeleteDlgA"
#define FUNCNAME_SHOWFUNCTIONDELETEDLG			"ShowFunctionDeleteDlgA"
#define FUNCNAME_FILTERFUNCTIONFILE				"FilterFunctionFileA"
#define FUNCNAME_ADDFUNCTIONFILECHANGE			"AddFunctionFileChangeA"
#define FUNCNAME_GETPROGRAMDIR					"GetProgramDirA"

#define PFNDOPUSCHOOSEFONT						PFNDOPUSCHOOSEFONTA
#define PFNGETCONFIGPATH						PFNGETCONFIGPATHA
#define PFNLOADORSAVECONFIG						PFNLOADORSAVECONFIGA
#define PFNXMLLOADFILE							PFNXMLLOADFILEA
#define PFNXMLSAVEFILE							PFNXMLSAVEFILEA
#define PFNXMLADDCHILDNODE						PFNXMLADDCHILDNODEA
#define PFNXMLFINDCHILDNODE						PFNXMLFINDCHILDNODEA
#define PFNXMLENUMCHILDNODES					PFNXMLENUMCHILDNODESA
#define PFNXMLGETNODENAME						PFNXMLGETNODENAMEA
#define PFNXMLSETNODENAME						PFNXMLSETNODENAMEA
#define PFNXMLGETNODEVALUE						PFNXMLGETNODEVALUEA
#define PFNXMLSETNODEVALUE						PFNXMLSETNODEVALUEA
#define PFNXMLGETNODELOGFONTVALUE				PFNXMLGETNODELOGFONTVALUEA
#define PFNXMLSETNODELOGFONTVALUE				PFNXMLSETNODELOGFONTVALUEA
#define PFNXMLGETNODEATTRIBUTE					PFNXMLGETNODEATTRIBUTEA
#define PFNXMLSETNODEATTRIBUTE					PFNXMLSETNODEATTRIBUTEA
#define PFNXMLGETNODEBOOLATTRIBUTE				PFNXMLGETNODEBOOLATTRIBUTEA
#define PFNXMLSETNODEBOOLATTRIBUTE				PFNXMLSETNODEBOOLATTRIBUTEA
#define PFNXMLGETNODEINTATTRIBUTE				PFNXMLGETNODEINTATTRIBUTEA
#define PFNXMLSETNODEINTATTRIBUTE				PFNXMLSETNODEINTATTRIBUTEA
#define PFNXMLGETNODEDWORDATTRIBUTE				PFNXMLGETNODEDWORDATTRIBUTEA
#define PFNXMLSETNODEDWORDATTRIBUTE				PFNXMLSETNODEDWORDATTRIBUTEA
#define PFNXMLGETNODEDWORDLONGATTRIBUTE			PFNXMLGETNODEDWORDLONGATTRIBUTEA
#define PFNXMLSETNODEDWORDLONGATTRIBUTE			PFNXMLSETNODEDWORDLONGATTRIBUTEA
#define PFNXMLDELETENODEATTRIBUTE				PFNXMLDELETENODEATTRIBUTEA
#define PFNSHOWREQUESTDLG						PFNSHOWREQUESTDLGA
#define PFNSHOWFUNCTIONNEWNAMEDLG				PFNSHOWFUNCTIONNEWNAMEDLGA
#define PFNGETWILDNEWNAME						PFNGETWILDNEWNAMEA
#define PFNSHOWFUNCTIONERRORDLG					PFNSHOWFUNCTIONERRORDLGA
#define PFNSHOWFUNCTIONREPLACEDLG				PFNSHOWFUNCTIONREPLACEDLGA
#define PFNSHOWFUNCTIONINITIALDELETEDLG			PFNSHOWFUNCTIONINITIALDELETEDLGA
#define PFNSHOWFUNCTIONDELETEDLG				PFNSHOWFUNCTIONDELETEDLGA
#define PFNFILTERFUNCTIONFILE					PFNFILTERFUNCTIONFILEA
#define PFNADDFUNCTIONFILECHANGE				PFNADDFUNCTIONFILECHANGEA
#define PFNGETPROGRAMDIR						PFNGETPROGRAMDIRA

#endif

#define FUNCNAME_GETTHUMBNAILPREFS				"GetThumbnailPrefs"
#define FUNCNAME_XMLLOADDATA					"XMLLoadData"
#define FUNCNAME_XMLSAVEDATA					"XMLSaveData"
#define FUNCNAME_XMLCREATEFILE					"XMLCreateFile"
#define FUNCNAME_XMLFREEFILE					"XMLFreeFile"
#define FUNCNAME_XMLFIRSTCHILDNODE				"XMLFirstChildNode"
#define FUNCNAME_XMLNEXTNODE					"XMLNextNode"
#define FUNCNAME_XMLGETNODEBOOLVALUE			"XMLGetNodeBoolValue"
#define FUNCNAME_XMLSETNODEBOOLVALUE			"XMLSetNodeBoolValue"
#define FUNCNAME_XMLGETNODEINTVALUE				"XMLGetNodeIntValue"
#define FUNCNAME_XMLSETNODEINTVALUE				"XMLSetNodeIntValue"
#define FUNCNAME_XMLGETNODEDWORDVALUE			"XMLGetNodeDWORDValue"
#define FUNCNAME_XMLSETNODEDWORDVALUE			"XMLSetNodeDWORDValue"
#define FUNCNAME_XMLGETNODEDWORDLONGVALUE		"XMLGetNodeDWORDLONGValue"
#define FUNCNAME_XMLSETNODEDWORDLONGVALUE		"XMLSetNodeDWORDLONGValue"
#define FUNCNAME_XMLGETNODEBINARYVALUE			"XMLGetNodeBinaryValue"
#define FUNCNAME_XMLSETNODEBINARYVALUE			"XMLSetNodeBinaryValue"
#define FUNCNAME_XMLDELETECHILD					"XMLDeleteChild"
#define FUNCNAME_XMLDELETEALLCHILDNODES			"XMLDeleteAllChildNodes"
#define FUNCNAME_XMLDELETEALLNODEATTRIBUTES		"XMLDeleteAllNodeAttributes"
#define FUNCNAME_UPDATEFUNCTIONPROGRESSBAR		"UpdateFunctionProgressBar"
#define FUNCNAME_ISUSBINSTALL					"IsUSBInstall"
#define FUNCNAME_DRAWPICTUREFRAMEINDIB			"DrawPictureFrameInDIB"
#define FUNCNAME_GETFUNCTIONWINDOW				"GetFunctionWindow"
#define FUNCNAME_CALCCRC32						"CalcCRC32"
#define FUNCNAME_OPUSREGOPENKEYW				"OpusRegOpenKeyW"
#define FUNCNAME_OPUSREGCREATEKEYW				"OpusRegCreateKeyW"
#define FUNCNAME_OPUSREGQUERYVALUEW				"OpusRegQueryValueW"
#define FUNCNAME_OPUSREGCLOSEKEY				"OpusRegCloseKey"
#define FUNCNAME_OPUSREGDELETEKEYW				"OpusRegDeleteKeyW"
#define FUNCNAME_OPUSREGDELETEVALUEW			"OpusRegDeleteValueW"
#define FUNCNAME_OPUSREGSETVALUEW				"OpusRegSetValueW"
#define FUNCNAME_OPUSREGCHECKELEVATION			"OpusRegCheckElevation"
#define FUNCNAME_DISABLEWOW64REDIRECTION		"DisableWow64Redirection"
#define FUNCNAME_REVERTWOW64REDIRECTION			"RevertWow64Redirection"
#define FUNCNAME_CREATEBUTTONICONS				"CreateButtonIcons"
#define FUNCNAME_THUMBNAILCACHECONTROL			"ThumbnailCacheControl"
#define FUNCNAME_CREATEDIALOGRESIZER			"CreateDialogResizer"
#define FUNCNAME_ADDDIALOGRESIZERCTL			"AddDialogResizerCtl"
#define FUNCNAME_HANDLEDIALOGRESIZERMSG			"HandleDialogResizerMsg"
#define FUNCNAME_FREEDIALOGRESIZER				"FreeDialogResizer"
#define FUNCNAME_GETGLYPHSIZE					"GetGlyphSize"
#define FUNCNAME_DRAWGLYPH						"DrawGlyph"
#define FUNCNAME_GETSTRING						"GetString"
#define FUNCNAME_GETLANGDLG						"GetLangDlg"
#define FUNCNAME_CREATELANGDLG					"CreateLangDlg"
#define FUNCNAME_LANGDLGBOX						"LangDlgBox"
#define FUNCNAME_HASHINIT						"HashInit"
#define FUNCNAME_HASHCHUNK						"HashChunk"
#define FUNCNAME_HASHEND						"HashEnd"
#define FUNCNAME_HASHFREE						"HashFree"
#define FUNCNAME_DOLOADIMAGE					"DOLoadImage"

#ifdef DOPUS_PLUGIN_HELPER

class DOpusPluginHelperBase
{
public:
	HINSTANCE	Dll() { return GetModuleHandle(TEXT("dopus.exe")); }
};

class DOpusPluginHelperConfig : public DOpusPluginHelperBase
{
	PFNGETCONFIGPATH				dph_pfnGetConfigPath;
	PFNLOADORSAVECONFIG				dph_pfnLoadOrSaveConfig;
	PFNGETTHUMBNAILPREFS			dph_pfnGetThumbnailPrefs;
	PFNISUSBINSTALL					dph_pfnIsUSBInstall;
	PFNGETPROGRAMDIR				dph_pfnGetProgramDir;
	PFNTHUMBNAILCACHECONTROL		dph_pfnThumbnailCacheControl;

public:
	DOpusPluginHelperConfig()
	{
		memset(this,0,sizeof(DOpusPluginHelperConfig));
		HINSTANCE hOpus = Dll();
		if (hOpus)
		{
			dph_pfnGetConfigPath=(PFNGETCONFIGPATH)GetProcAddress(hOpus,FUNCNAME_GETCONFIGPATH);
			dph_pfnLoadOrSaveConfig=(PFNLOADORSAVECONFIG)GetProcAddress(hOpus,FUNCNAME_LOADORSAVECONFIG);
			dph_pfnGetThumbnailPrefs=(PFNGETTHUMBNAILPREFS)GetProcAddress(hOpus,FUNCNAME_GETTHUMBNAILPREFS);
			dph_pfnIsUSBInstall=(PFNISUSBINSTALL)GetProcAddress(hOpus,FUNCNAME_ISUSBINSTALL);
			dph_pfnGetProgramDir=(PFNGETPROGRAMDIR)GetProcAddress(hOpus,FUNCNAME_GETPROGRAMDIR);
			dph_pfnThumbnailCacheControl=(PFNTHUMBNAILCACHECONTROL)GetProcAddress(hOpus,FUNCNAME_THUMBNAILCACHECONTROL);
		}
	}

	BOOL GetConfigPath(int iPathType,LPTSTR pszBuf,UINT cchMax) {
		return (dph_pfnGetConfigPath)?dph_pfnGetConfigPath(iPathType,pszBuf,cchMax):FALSE;
	}
	BOOL LoadOrSaveConfig(int iOperation,LPDOPUSPLUGINCONFIGDATA lpCfgData) {
		return (dph_pfnLoadOrSaveConfig)?dph_pfnLoadOrSaveConfig(iOperation,lpCfgData):FALSE;
	}
	BOOL GetThumbnailPrefs(LPDOPUSTHUMBNAILPREFSDATA lpThumbData) {
		return (dph_pfnGetThumbnailPrefs)?dph_pfnGetThumbnailPrefs(lpThumbData):FALSE;
	}
	BOOL IsUSBInstall(void) {
		return (dph_pfnIsUSBInstall)?dph_pfnIsUSBInstall():FALSE;
	}
	BOOL GetProgramDir(LPTSTR pszBuf,int cchBufSize) {
		return (dph_pfnGetProgramDir)?dph_pfnGetProgramDir(pszBuf,cchBufSize):0;
	}
	BOOL ThumbnailCacheControl(LPTHUMBCACHECONTROLDATA pData) {
		return (dph_pfnThumbnailCacheControl)?dph_pfnThumbnailCacheControl(pData):0;
	}
};

class DOpusPluginHelperFunction : public DOpusPluginHelperBase
{
	PFNSHOWFUNCTIONNEWNAMEDLG		dph_pfnShowFunctionNewNameDlg;
	PFNGETWILDNEWNAME				dph_pfnGetWildNewName;
	PFNSHOWFUNCTIONERRORDLG			dph_pfnShowFunctionErrorDlg;
	PFNSHOWFUNCTIONREPLACEDLG		dph_pfnShowFunctionReplaceDlg;
	PFNSHOWFUNCTIONINITIALDELETEDLG	dph_pfnShowFunctionInitialDeleteDlg;
	PFNSHOWFUNCTIONDELETEDLG		dph_pfnShowFunctionDeleteDlg;
	PFNFILTERFUNCTIONFILE			dph_pfnFilterFunctionFile;
	PFNADDFUNCTIONFILECHANGE		dph_pfnAddFunctionFileChange;
	PFNUPDATEFUNCTIONPROGRESSBAR	dph_pfnUpdateFunctionProgressBar;
	PFNGETFUNCTIONWINDOW			dph_pfnGetFunctionWindow;

public:
	DOpusPluginHelperFunction()
	{
		memset(this,0,sizeof(DOpusPluginHelperFunction));
		HINSTANCE hOpus = Dll();
		if (hOpus)
		{
			dph_pfnShowFunctionNewNameDlg=(PFNSHOWFUNCTIONNEWNAMEDLG)GetProcAddress(hOpus,FUNCNAME_SHOWFUNCTIONNEWNAMEDLG);
			dph_pfnGetWildNewName=(PFNGETWILDNEWNAME)GetProcAddress(hOpus,FUNCNAME_GETWILDNEWNAME);
			dph_pfnShowFunctionErrorDlg=(PFNSHOWFUNCTIONERRORDLG)GetProcAddress(hOpus,FUNCNAME_SHOWFUNCTIONERRORDLG);
			dph_pfnShowFunctionReplaceDlg=(PFNSHOWFUNCTIONREPLACEDLG)GetProcAddress(hOpus,FUNCNAME_SHOWFUNCTIONREPLACEDLG);
			dph_pfnShowFunctionInitialDeleteDlg=(PFNSHOWFUNCTIONINITIALDELETEDLG)GetProcAddress(hOpus,FUNCNAME_SHOWFUNCTIONINITIALDELETEDLG);
			dph_pfnShowFunctionDeleteDlg=(PFNSHOWFUNCTIONDELETEDLG)GetProcAddress(hOpus,FUNCNAME_SHOWFUNCTIONDELETEDLG);
			dph_pfnFilterFunctionFile=(PFNFILTERFUNCTIONFILE)GetProcAddress(hOpus,FUNCNAME_FILTERFUNCTIONFILE);
			dph_pfnAddFunctionFileChange=(PFNADDFUNCTIONFILECHANGE)GetProcAddress(hOpus,FUNCNAME_ADDFUNCTIONFILECHANGE);
			dph_pfnUpdateFunctionProgressBar=(PFNUPDATEFUNCTIONPROGRESSBAR)GetProcAddress(hOpus,FUNCNAME_UPDATEFUNCTIONPROGRESSBAR);
			dph_pfnGetFunctionWindow=(PFNGETFUNCTIONWINDOW)GetProcAddress(hOpus,FUNCNAME_GETFUNCTIONWINDOW);
		}
	}

	int ShowFunctionNewNameDlg(LPVOID lpFuncData,LPTSTR lpszOldName,int cchOldNameMax,LPTSTR lpszNewName,int cchNewNameMax,BOOL fMove) {
		return (dph_pfnShowFunctionNewNameDlg)?dph_pfnShowFunctionNewNameDlg(lpFuncData,lpszOldName,cchOldNameMax,lpszNewName,cchNewNameMax,fMove):0;
	}
	BOOL GetWildNewName(LPTSTR lpszOldPattern,LPCTSTR lpszNewPattern,LPCTSTR lpszFileName,LPTSTR lpszNewName,int cchNewNameMax) {
		return (dph_pfnGetWildNewName)?dph_pfnGetWildNewName(lpszOldPattern,lpszNewPattern,lpszFileName,lpszNewName,cchNewNameMax):FALSE;
	}
	int ShowFunctionErrorDlg(LPVOID lpFuncData,UINT uiType,int iErrorCode,UINT uiAction,LPCTSTR lpszName,LPCTSTR lpszErrMsg=0) {
		return (dph_pfnShowFunctionErrorDlg)?dph_pfnShowFunctionErrorDlg(lpFuncData,uiType,iErrorCode,uiAction,lpszName,lpszErrMsg):0;
	}
	int ShowFunctionReplaceDlg(LPVOID lpFuncData,LPCTSTR pszSource,const WIN32_FIND_DATA *pwfdSource,LPCTSTR pszDest,const WIN32_FIND_DATA *pwfdDest,LPTSTR pszNewName,int cchNewNameMax,DWORD dwFlags) {
		return (dph_pfnShowFunctionReplaceDlg)?dph_pfnShowFunctionReplaceDlg(lpFuncData,pszSource,pwfdSource,pszDest,pwfdDest,pszNewName,cchNewNameMax,dwFlags):0;
	}
	int ShowFunctionInitialDeleteDlg(LPVOID lpFuncData,LPCTSTR pszFileName) {
		return (dph_pfnShowFunctionInitialDeleteDlg)?dph_pfnShowFunctionInitialDeleteDlg(lpFuncData,pszFileName):0;
	}
	int ShowFunctionDeleteDlg(LPVOID lpFuncData,LPCTSTR pszFileName,BOOL fFolder,DWORD dwFileCount,DWORD dwFileSizeHigh,DWORD dwFileSizeLow) {
		return (dph_pfnShowFunctionDeleteDlg)?dph_pfnShowFunctionDeleteDlg(lpFuncData,pszFileName,fFolder,dwFileCount,dwFileSizeHigh,dwFileSizeLow):0;
	}
	BOOL FilterFunctionFile(LPVOID lpFuncData,LPCTSTR lpszFile,const WIN32_FIND_DATA *lpWFD,BOOL fSubFolderFilter) {
		return (dph_pfnFilterFunctionFile)?dph_pfnFilterFunctionFile(lpFuncData,lpszFile,lpWFD,fSubFolderFilter):FALSE;
	}
	void AddFunctionFileChange(LPVOID lpFuncData,BOOL fIsDest,int iType,LPCTSTR lpszFile) {
		if (dph_pfnAddFunctionFileChange) dph_pfnAddFunctionFileChange(lpFuncData,fIsDest,iType,lpszFile);
	}
	void UpdateFunctionProgressBar(LPVOID lpFuncData,UINT uiAction,DWORD_PTR dwData) {
		if (dph_pfnUpdateFunctionProgressBar) dph_pfnUpdateFunctionProgressBar(lpFuncData,uiAction,dwData);
	}
	HWND GetFunctionWindow(LPVOID lpFuncData) {
		return (dph_pfnGetFunctionWindow)?dph_pfnGetFunctionWindow(lpFuncData):0;
	}
};

class DOpusPluginHelperXML : public DOpusPluginHelperBase
{
	PFNXMLLOADFILE					dph_pfnXMLLoadFile;
	PFNXMLSAVEFILE					dph_pfnXMLSaveFile;
	PFNXMLLOADDATA					dph_pfnXMLLoadData;
	PFNXMLSAVEDATA					dph_pfnXMLSaveData;
	PFNXMLCREATEFILE				dph_pfnXMLCreateFile;
	PFNXMLFREEFILE					dph_pfnXMLFreeFile;
	PFNXMLADDCHILDNODE				dph_pfnXMLAddChildNode;
	PFNXMLDELETECHILD				dph_pfnXMLDeleteChild;
	PFNXMLDELETEALLCHILDNODES		dph_pfnXMLDeleteAllChildNodes;
	PFNXMLFIRSTCHILDNODE			dph_pfnXMLFirstChildNode;
	PFNXMLNEXTNODE					dph_pfnXMLNextNode;
	PFNXMLFINDCHILDNODE				dph_pfnXMLFindChildNode;
	PFNXMLENUMCHILDNODES			dph_pfnXMLEnumChildNodes;
	PFNXMLGETNODENAME				dph_pfnXMLGetNodeName;
	PFNXMLSETNODENAME				dph_pfnXMLSetNodeName;
	PFNXMLGETNODEVALUE				dph_pfnXMLGetNodeValue;
	PFNXMLSETNODEVALUE				dph_pfnXMLSetNodeValue;

	PFNXMLGETNODEBOOLVALUE			dph_pfnXMLGetNodeBoolValue;
	PFNXMLSETNODEBOOLVALUE			dph_pfnXMLSetNodeBoolValue;
	PFNXMLGETNODEINTVALUE			dph_pfnXMLGetNodeIntValue;
	PFNXMLSETNODEINTVALUE			dph_pfnXMLSetNodeIntValue;
	PFNXMLGETNODEDWORDVALUE			dph_pfnXMLGetNodeDWORDValue;
	PFNXMLSETNODEDWORDVALUE			dph_pfnXMLSetNodeDWORDValue;
	PFNXMLGETNODEDWORDLONGVALUE		dph_pfnXMLGetNodeDWORDLONGValue;
	PFNXMLSETNODEDWORDLONGVALUE		dph_pfnXMLSetNodeDWORDLONGValue;
	PFNXMLGETNODELOGFONTVALUE		dph_pfnXMLGetNodeLOGFONTValue;
	PFNXMLSETNODELOGFONTVALUE		dph_pfnXMLSetNodeLOGFONTValue;
	PFNXMLGETNODEBINARYVALUE		dph_pfnXMLGetNodeBinaryValue;
	PFNXMLSETNODEBINARYVALUE		dph_pfnXMLSetNodeBinaryValue;
	PFNXMLGETNODEATTRIBUTE			dph_pfnXMLGetNodeAttribute;
	PFNXMLSETNODEATTRIBUTE			dph_pfnXMLSetNodeAttribute;
	PFNXMLGETNODEBOOLATTRIBUTE		dph_pfnXMLGetNodeBoolAttribute;
	PFNXMLSETNODEBOOLATTRIBUTE		dph_pfnXMLSetNodeBoolAttribute;
	PFNXMLGETNODEINTATTRIBUTE		dph_pfnXMLGetNodeIntAttribute;
	PFNXMLSETNODEINTATTRIBUTE		dph_pfnXMLSetNodeIntAttribute;
	PFNXMLGETNODEDWORDATTRIBUTE		dph_pfnXMLGetNodeDWORDAttribute;
	PFNXMLSETNODEDWORDATTRIBUTE		dph_pfnXMLSetNodeDWORDAttribute;
	PFNXMLGETNODEDWORDLONGATTRIBUTE	dph_pfnXMLGetNodeDWORDLONGAttribute;
	PFNXMLSETNODEDWORDLONGATTRIBUTE	dph_pfnXMLSetNodeDWORDLONGAttribute;

	PFNXMLDELETENODEATTRIBUTE		dph_pfnXMLDeleteNodeAttribute;
	PFNXMLDELETEALLNODEATTRIBUTES	dph_pfnXMLDeleteAllNodeAttributes;

public:
	DOpusPluginHelperXML()
	{
		memset(this,0,sizeof(DOpusPluginHelperXML));
		HINSTANCE hOpus = Dll();
		if (hOpus)
		{
			dph_pfnXMLLoadFile=(PFNXMLLOADFILE)GetProcAddress(hOpus,FUNCNAME_XMLLOADFILE);
			dph_pfnXMLSaveFile=(PFNXMLSAVEFILE)GetProcAddress(hOpus,FUNCNAME_XMLSAVEFILE);
			dph_pfnXMLLoadData=(PFNXMLLOADDATA)GetProcAddress(hOpus,FUNCNAME_XMLLOADDATA);
			dph_pfnXMLSaveData=(PFNXMLSAVEDATA)GetProcAddress(hOpus,FUNCNAME_XMLSAVEDATA);
			dph_pfnXMLCreateFile=(PFNXMLCREATEFILE)GetProcAddress(hOpus,FUNCNAME_XMLCREATEFILE);
			dph_pfnXMLFreeFile=(PFNXMLFREEFILE)GetProcAddress(hOpus,FUNCNAME_XMLFREEFILE);
			dph_pfnXMLAddChildNode=(PFNXMLADDCHILDNODE)GetProcAddress(hOpus,FUNCNAME_XMLADDCHILDNODE);
			dph_pfnXMLDeleteChild=(PFNXMLDELETECHILD)GetProcAddress(hOpus,FUNCNAME_XMLDELETECHILD);
			dph_pfnXMLDeleteAllChildNodes=(PFNXMLDELETEALLCHILDNODES)GetProcAddress(hOpus,FUNCNAME_XMLDELETEALLCHILDNODES);
			dph_pfnXMLFirstChildNode=(PFNXMLFIRSTCHILDNODE)GetProcAddress(hOpus,FUNCNAME_XMLFIRSTCHILDNODE);
			dph_pfnXMLNextNode=(PFNXMLNEXTNODE)GetProcAddress(hOpus,FUNCNAME_XMLNEXTNODE);
			dph_pfnXMLFindChildNode=(PFNXMLFINDCHILDNODE)GetProcAddress(hOpus,FUNCNAME_XMLFINDCHILDNODE);
			dph_pfnXMLEnumChildNodes=(PFNXMLENUMCHILDNODES)GetProcAddress(hOpus,FUNCNAME_XMLENUMCHILDNODES);
			dph_pfnXMLGetNodeName=(PFNXMLGETNODENAME)GetProcAddress(hOpus,FUNCNAME_XMLGETNODENAME);
			dph_pfnXMLSetNodeName=(PFNXMLSETNODENAME)GetProcAddress(hOpus,FUNCNAME_XMLSETNODENAME);
			dph_pfnXMLGetNodeValue=(PFNXMLGETNODEVALUE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODEVALUE);
			dph_pfnXMLSetNodeValue=(PFNXMLSETNODEVALUE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODEVALUE);
			dph_pfnXMLGetNodeBoolValue=(PFNXMLGETNODEBOOLVALUE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODEBOOLVALUE);
			dph_pfnXMLSetNodeBoolValue=(PFNXMLSETNODEBOOLVALUE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODEBOOLVALUE);
			dph_pfnXMLGetNodeIntValue=(PFNXMLGETNODEINTVALUE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODEINTVALUE);
			dph_pfnXMLSetNodeIntValue=(PFNXMLSETNODEINTVALUE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODEINTVALUE);
			dph_pfnXMLGetNodeDWORDValue=(PFNXMLGETNODEDWORDVALUE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODEDWORDVALUE);
			dph_pfnXMLSetNodeDWORDValue=(PFNXMLSETNODEDWORDVALUE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODEDWORDVALUE);
			dph_pfnXMLGetNodeDWORDLONGValue=(PFNXMLGETNODEDWORDLONGVALUE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODEDWORDLONGVALUE);
			dph_pfnXMLSetNodeDWORDLONGValue=(PFNXMLSETNODEDWORDLONGVALUE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODEDWORDLONGVALUE);
			dph_pfnXMLGetNodeLOGFONTValue=(PFNXMLGETNODELOGFONTVALUE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODELOGFONTVALUE);
			dph_pfnXMLSetNodeLOGFONTValue=(PFNXMLSETNODELOGFONTVALUE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODELOGFONTVALUE);
			dph_pfnXMLGetNodeBinaryValue=(PFNXMLGETNODEBINARYVALUE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODEBINARYVALUE);
			dph_pfnXMLSetNodeBinaryValue=(PFNXMLSETNODEBINARYVALUE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODEBINARYVALUE);
			dph_pfnXMLGetNodeAttribute=(PFNXMLGETNODEATTRIBUTE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODEATTRIBUTE);
			dph_pfnXMLSetNodeAttribute=(PFNXMLSETNODEATTRIBUTE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODEATTRIBUTE);
			dph_pfnXMLGetNodeBoolAttribute=(PFNXMLGETNODEBOOLATTRIBUTE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODEBOOLATTRIBUTE);
			dph_pfnXMLSetNodeBoolAttribute=(PFNXMLSETNODEBOOLATTRIBUTE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODEBOOLATTRIBUTE);
			dph_pfnXMLGetNodeIntAttribute=(PFNXMLGETNODEINTATTRIBUTE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODEINTATTRIBUTE);
			dph_pfnXMLSetNodeIntAttribute=(PFNXMLSETNODEINTATTRIBUTE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODEINTATTRIBUTE);
			dph_pfnXMLGetNodeDWORDAttribute=(PFNXMLGETNODEDWORDATTRIBUTE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODEDWORDATTRIBUTE);
			dph_pfnXMLSetNodeDWORDAttribute=(PFNXMLSETNODEDWORDATTRIBUTE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODEDWORDATTRIBUTE);
			dph_pfnXMLGetNodeDWORDLONGAttribute=(PFNXMLGETNODEDWORDLONGATTRIBUTE)GetProcAddress(hOpus,FUNCNAME_XMLGETNODEDWORDLONGATTRIBUTE);
			dph_pfnXMLSetNodeDWORDLONGAttribute=(PFNXMLSETNODEDWORDLONGATTRIBUTE)GetProcAddress(hOpus,FUNCNAME_XMLSETNODEDWORDLONGATTRIBUTE);
			dph_pfnXMLDeleteNodeAttribute=(PFNXMLDELETENODEATTRIBUTE)GetProcAddress(hOpus,FUNCNAME_XMLDELETENODEATTRIBUTE);
			dph_pfnXMLDeleteAllNodeAttributes=(PFNXMLDELETEALLNODEATTRIBUTES)GetProcAddress(hOpus,FUNCNAME_XMLDELETEALLNODEATTRIBUTES);
		}
	}

	HANDLE XMLLoadFile(LPCTSTR pszFile) {
		return (dph_pfnXMLLoadFile)?dph_pfnXMLLoadFile(pszFile):0;
	}
	BOOL XMLSaveFile(HANDLE hXML,LPCTSTR pszFile) {
		return (dph_pfnXMLSaveFile)?dph_pfnXMLSaveFile(hXML,pszFile):FALSE;
	}
	HANDLE XMLLoadData(LPCVOID pData,DWORD dwSize) {
		return (dph_pfnXMLLoadData)?dph_pfnXMLLoadData(pData,dwSize):0;
	}
	BOOL XMLSaveData(HANDLE hXML,LPWSTR *pszOutFreeViaCTMA) {
		return (dph_pfnXMLSaveData)?dph_pfnXMLSaveData(hXML,pszOutFreeViaCTMA):FALSE;
	}
	HANDLE XMLCreateFile(void) {
		return (dph_pfnXMLCreateFile)?dph_pfnXMLCreateFile():0;
	}
	void XMLFreeFile(HANDLE hXML) {
		if (dph_pfnXMLFreeFile) dph_pfnXMLFreeFile(hXML);
	}
	HANDLE XMLAddChildNode(HANDLE hXML,LPCTSTR pszName) {
		return (dph_pfnXMLAddChildNode)?dph_pfnXMLAddChildNode(hXML,pszName):0;
	}
	BOOL XMLDeleteChild(HANDLE hXML,HANDLE hChild) {
		return (dph_pfnXMLDeleteChild)?dph_pfnXMLDeleteChild(hXML,hChild):0;
	}
	BOOL XMLDeleteAllChildNodes(HANDLE hXML) {
		return (dph_pfnXMLDeleteAllChildNodes)?dph_pfnXMLDeleteAllChildNodes(hXML):0;
	}
	HANDLE XMLFirstChildNode(HANDLE hXML) {
		return (dph_pfnXMLFirstChildNode)?dph_pfnXMLFirstChildNode(hXML):0;
	}
	HANDLE XMLNextNode(HANDLE hXML) {
		return (dph_pfnXMLNextNode)?dph_pfnXMLNextNode(hXML):0;
	}
	HANDLE XMLFindChildNode(HANDLE hXML,LPCTSTR pszName) {
		return (dph_pfnXMLFindChildNode)?dph_pfnXMLFindChildNode(hXML,pszName):0;
	}
	HANDLE XMLEnumChildNodes(HANDLE hXML,LPCTSTR pszName,HANDLE hPrev) {
		return (dph_pfnXMLEnumChildNodes)?dph_pfnXMLEnumChildNodes(hXML,pszName,hPrev):0;
	}
	BOOL XMLGetNodeName(HANDLE hXML,LPTSTR pszName,LPINT pcchMax) {
		return (dph_pfnXMLGetNodeName)?dph_pfnXMLGetNodeName(hXML,pszName,pcchMax):FALSE;
	}
	BOOL XMLSetNodeName(HANDLE hXML,LPCTSTR pszName) {
		return (dph_pfnXMLSetNodeName)?dph_pfnXMLSetNodeName(hXML,pszName):FALSE;
	}
	BOOL XMLGetNodeValue(HANDLE hXML,LPTSTR pszValue,LPINT pcchMax) {
		return (dph_pfnXMLGetNodeValue)?dph_pfnXMLGetNodeValue(hXML,pszValue,pcchMax):FALSE;
	}
	BOOL XMLSetNodeValue(HANDLE hXML,LPCTSTR pszValue) {
		return (dph_pfnXMLSetNodeValue)?dph_pfnXMLSetNodeValue(hXML,pszValue):FALSE;
	}

	BOOL XMLGetNodeBoolValue(HANDLE hXML,LPBOOL pfValue) {
		return (dph_pfnXMLGetNodeBoolValue)?dph_pfnXMLGetNodeBoolValue(hXML,pfValue):FALSE;
	}
	BOOL XMLSetNodeBoolValue(HANDLE hXML,BOOL fValue) {
		return (dph_pfnXMLSetNodeBoolValue)?dph_pfnXMLSetNodeBoolValue(hXML,fValue):FALSE;
	}
	BOOL XMLGetNodeIntValue(HANDLE hXML,LPINT piValue) {
		return (dph_pfnXMLGetNodeIntValue)?dph_pfnXMLGetNodeIntValue(hXML,piValue):FALSE;
	}
	BOOL XMLSetNodeIntValue(HANDLE hXML,INT iValue) {
		return (dph_pfnXMLSetNodeIntValue)?dph_pfnXMLSetNodeIntValue(hXML,iValue):FALSE;
	}
	BOOL XMLGetNodeDWORDValue(HANDLE hXML,LPDWORD pdwValue) {
		return (dph_pfnXMLGetNodeDWORDValue)?dph_pfnXMLGetNodeDWORDValue(hXML,pdwValue):FALSE;
	}
	BOOL XMLSetNodeDWORDValue(HANDLE hXML,DWORD dwValue) {
		return (dph_pfnXMLSetNodeDWORDValue)?dph_pfnXMLSetNodeDWORDValue(hXML,dwValue):FALSE;
	}
	BOOL XMLGetNodeDWORDLONGValue(HANDLE hXML,PDWORDLONG pdwlValue) {
		return (dph_pfnXMLGetNodeDWORDLONGValue)?dph_pfnXMLGetNodeDWORDLONGValue(hXML,pdwlValue):FALSE;
	}
	BOOL XMLSetNodeDWORDLONGValue(HANDLE hXML,DWORDLONG dwlValue) {
		return (dph_pfnXMLSetNodeDWORDLONGValue)?dph_pfnXMLSetNodeDWORDLONGValue(hXML,dwlValue):FALSE;
	}
	BOOL XMLGetNodeLOGFONTValue(HANDLE hXML,LPLOGFONT plfValue) {
		return (dph_pfnXMLGetNodeLOGFONTValue)?dph_pfnXMLGetNodeLOGFONTValue(hXML,plfValue):FALSE;
	}
	BOOL XMLSetNodeLOGFONTValue(HANDLE hXML,const LOGFONT *plfValue) {
		return (dph_pfnXMLSetNodeLOGFONTValue)?dph_pfnXMLSetNodeLOGFONTValue(hXML,plfValue):FALSE;
	}
	BOOL XMLGetNodeBinaryValue(HANDLE hXML,LPVOID pValue,LPDWORD pdwSize) {
		return (dph_pfnXMLGetNodeBinaryValue)?dph_pfnXMLGetNodeBinaryValue(hXML,pValue,pdwSize):FALSE;
	}
	BOOL XMLSetNodeBinaryValue(HANDLE hXML,LPVOID pValue,DWORD dwSize) {
		return (dph_pfnXMLSetNodeBinaryValue)?dph_pfnXMLSetNodeBinaryValue(hXML,pValue,dwSize):FALSE;
	}
	BOOL XMLGetNodeAttribute(HANDLE hXML,LPCTSTR pszAttrName,LPTSTR pszAttrValue,LPINT pcchMax) {
		return (dph_pfnXMLGetNodeAttribute)?dph_pfnXMLGetNodeAttribute(hXML,pszAttrName,pszAttrValue,pcchMax):FALSE;
	}
	BOOL XMLSetNodeAttribute(HANDLE hXML,LPCTSTR pszAttrName,LPCTSTR pszAttrValue) {
		return (dph_pfnXMLSetNodeAttribute)?dph_pfnXMLSetNodeAttribute(hXML,pszAttrName,pszAttrValue):FALSE;
	}
	BOOL XMLGetNodeBoolAttribute(HANDLE hXML,LPCTSTR pszAttrName,LPBOOL pfAttrValue) {
		return (dph_pfnXMLGetNodeBoolAttribute)?dph_pfnXMLGetNodeBoolAttribute(hXML,pszAttrName,pfAttrValue):FALSE;
	}
	BOOL XMLSetNodeBoolAttribute(HANDLE hXML,LPCTSTR pszAttrName,BOOL fAttrValue) {
		return (dph_pfnXMLSetNodeBoolAttribute)?dph_pfnXMLSetNodeBoolAttribute(hXML,pszAttrName,fAttrValue):FALSE;
	}
	BOOL XMLGetNodeIntAttribute(HANDLE hXML,LPCTSTR pszAttrName,LPINT piAttrValue) {
		return (dph_pfnXMLGetNodeIntAttribute)?dph_pfnXMLGetNodeIntAttribute(hXML,pszAttrName,piAttrValue):FALSE;
	}
	BOOL XMLSetNodeIntAttribute(HANDLE hXML,LPCTSTR pszAttrName,INT iAttrValue) {
		return (dph_pfnXMLSetNodeIntAttribute)?dph_pfnXMLSetNodeIntAttribute(hXML,pszAttrName,iAttrValue):FALSE;
	}
	BOOL XMLGetNodeDWORDAttribute(HANDLE hXML,LPTSTR pszAttrName,LPDWORD pdwAttrValue) {
		return (dph_pfnXMLGetNodeDWORDAttribute)?dph_pfnXMLGetNodeDWORDAttribute(hXML,pszAttrName,pdwAttrValue):FALSE;
	}
	BOOL XMLSetNodeDWORDAttribute(HANDLE hXML,LPTSTR pszAttrName,DWORD dwAttrValue) {
		return (dph_pfnXMLSetNodeDWORDAttribute)?dph_pfnXMLSetNodeDWORDAttribute(hXML,pszAttrName,dwAttrValue):FALSE;
	}
	BOOL XMLGetNodeDWORDLONGAttribute(HANDLE hXML,LPCTSTR pszAttrName,PDWORDLONG pdwlAttrValue) {
		return (dph_pfnXMLGetNodeDWORDLONGAttribute)?dph_pfnXMLGetNodeDWORDLONGAttribute(hXML,pszAttrName,pdwlAttrValue):FALSE;
	}
	BOOL XMLSetNodeDWORDLONGAttribute(HANDLE hXML,LPCTSTR pszAttrName,DWORDLONG dwlAttrValue) {
		return (dph_pfnXMLSetNodeDWORDLONGAttribute)?dph_pfnXMLSetNodeDWORDLONGAttribute(hXML,pszAttrName,dwlAttrValue):FALSE;
	}
	BOOL XMLDeleteNodeAttribute(HANDLE hXML,LPCTSTR pszAttrName) {
		return (dph_pfnXMLDeleteNodeAttribute)?dph_pfnXMLDeleteNodeAttribute(hXML,pszAttrName):FALSE;
	}
	BOOL XMLDeleteAllNodeAttributes(HANDLE hXML) {
		return (dph_pfnXMLDeleteAllNodeAttributes)?dph_pfnXMLDeleteAllNodeAttributes(hXML):FALSE;
	}
};

class DOpusPluginHelperRegistry : public DOpusPluginHelperBase
{
	PFNOPUSREGOPENKEYW				dph_pfnOpusRegOpenKeyW;
	PFNOPUSREGCREATEKEYW			dph_pfnOpusRegCreateKeyW;
	PFNOPUSREGQUERYVALUEW			dph_pfnOpusRegQueryValueW;
	PFNOPUSREGCLOSEKEY				dph_pfnOpusRegCloseKey;
	PFNOPUSREGDELETEKEYW			dph_pfnOpusRegDeleteKeyW;
	PFNOPUSREGDELETEVALUEW			dph_pfnOpusRegDeleteValueW;
	PFNOPUSREGSETVALUEW				dph_pfnOpusRegSetValueW;
	PFNOPUSREGCHECKELEVATION		dph_pfnOpusRegCheckElevation;

public:
	DOpusPluginHelperRegistry()
	{
		memset(this,0,sizeof(DOpusPluginHelperRegistry));
		HINSTANCE hOpus = Dll();
		if (hOpus)
		{
			dph_pfnOpusRegOpenKeyW=(PFNOPUSREGOPENKEYW)GetProcAddress(hOpus,FUNCNAME_OPUSREGOPENKEYW);
			dph_pfnOpusRegCreateKeyW=(PFNOPUSREGCREATEKEYW)GetProcAddress(hOpus,FUNCNAME_OPUSREGCREATEKEYW);
			dph_pfnOpusRegQueryValueW=(PFNOPUSREGQUERYVALUEW)GetProcAddress(hOpus,FUNCNAME_OPUSREGQUERYVALUEW);
			dph_pfnOpusRegCloseKey=(PFNOPUSREGCLOSEKEY)GetProcAddress(hOpus,FUNCNAME_OPUSREGCLOSEKEY);
			dph_pfnOpusRegDeleteKeyW=(PFNOPUSREGDELETEKEYW)GetProcAddress(hOpus,FUNCNAME_OPUSREGDELETEKEYW);
			dph_pfnOpusRegDeleteValueW=(PFNOPUSREGDELETEVALUEW)GetProcAddress(hOpus,FUNCNAME_OPUSREGDELETEVALUEW);
			dph_pfnOpusRegSetValueW=(PFNOPUSREGSETVALUEW)GetProcAddress(hOpus,FUNCNAME_OPUSREGSETVALUEW);
			dph_pfnOpusRegCheckElevation=(PFNOPUSREGCHECKELEVATION)GetProcAddress(hOpus,FUNCNAME_OPUSREGCHECKELEVATION);
		}
	}

	LONG OpusRegOpenKeyW(OPUSREGKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired,OPUSREGKEY* phkResult)
	{
		return (dph_pfnOpusRegOpenKeyW)?dph_pfnOpusRegOpenKeyW(hKey,lpSubKey,samDesired,phkResult):ERROR_CALL_NOT_IMPLEMENTED;
	}
	LONG OpusRegCreateKeyW(OPUSREGKEY hKey,LPCWSTR lpSubKey,REGSAM samDesired,OPUSREGKEY* phkResult)
	{
		return (dph_pfnOpusRegCreateKeyW)?dph_pfnOpusRegCreateKeyW(hKey,lpSubKey,samDesired,phkResult):ERROR_CALL_NOT_IMPLEMENTED;
	}
	LONG OpusRegQueryValueW(OPUSREGKEY hKey,LPCWSTR lpValueName,LPDWORD lpType,LPBYTE lpData,LPDWORD lpcbData)
	{
		return (dph_pfnOpusRegQueryValueW)?dph_pfnOpusRegQueryValueW(hKey,lpValueName,lpType,lpData,lpcbData):ERROR_CALL_NOT_IMPLEMENTED;
	}
	LONG OpusRegCloseKey(OPUSREGKEY hKey)
	{
		return (dph_pfnOpusRegCloseKey)?dph_pfnOpusRegCloseKey(hKey):ERROR_CALL_NOT_IMPLEMENTED;
	}
	LONG OpusRegDeleteKeyW(OPUSREGKEY hKey,LPCWSTR lpSubKey)
	{
		return (dph_pfnOpusRegDeleteKeyW)?dph_pfnOpusRegDeleteKeyW(hKey,lpSubKey):ERROR_CALL_NOT_IMPLEMENTED;
	}
	LONG OpusRegDeleteValueW(OPUSREGKEY hKey,LPCWSTR lpValueName)
	{
		return (dph_pfnOpusRegDeleteValueW)?dph_pfnOpusRegDeleteValueW(hKey,lpValueName):ERROR_CALL_NOT_IMPLEMENTED;
	}
	LONG OpusRegSetValueW(OPUSREGKEY hKey,LPCWSTR lpValueName,DWORD dwType,LPCBYTE lpData,DWORD cbData)
	{
		return (dph_pfnOpusRegSetValueW)?dph_pfnOpusRegSetValueW(hKey,lpValueName,dwType,lpData,cbData):ERROR_CALL_NOT_IMPLEMENTED;
	}
	LONG OpusRegCheckElevation(OPUSREGKEY hKey,HWND hWnd)
	{
		return (dph_pfnOpusRegCheckElevation)?dph_pfnOpusRegCheckElevation(hKey,hWnd):ERROR_CALL_NOT_IMPLEMENTED;
	}
};

class DOpusPluginHelperUtil : public DOpusPluginHelperBase
{
	PFNDOPUSCHOOSEFONT				dph_pfnDOpusChooseFont;
	PFNSHOWREQUESTDLG				dph_pfnShowRequestDlg;
	PFNDRAWPICTUREFRAMEINDIB		dph_pfnDrawPictureFrameInDIB;
	PFNCALCCRC32					dph_pfnCalcCRC32;
	PFNCREATEBUTTONICONS			dph_pfnCreateButtonIcons;
	PFNCREATEDIALOGRESIZER			dph_pfnCreateDialogResizer;
	PFNADDDIALOGRESIZERCTL			dph_pfnAddDialogResizerCtl;
	PFNHANDLEDIALOGRESIZERMSG		dph_pfnHandleDialogResizerMsg;
	PFNFREEDIALOGRESIZER			dph_pfnFreeDialogResizer;
	PFNGETGLYPHSIZE					dph_pfnGetGlyphSize;
	PFNDRAWGLYPH					dph_pfnDrawGlyph;
	PFNGETSTRING					dph_pfnGetString;
	PFNGETLANGDLG					dph_pfnGetLangDlg;
	PFNCREATELANGDLG				dph_pfnCreateLangDlg;
	PFNLANGDLGBOX					dph_pfnLangDlgBox;
	PFNHASHINIT						dph_pfnHashInit;
	PFNHASHCHUNK					dph_pfnHashChunk;
	PFNHASHEND						dph_pfnHashEnd;
	PFNHASHFREE						dph_pfnHashFree;
	PFNDOLOADIMAGE					dph_pfnDOLoadImage;

public:
	DOpusPluginHelperUtil()
	{
		memset(this,0,sizeof(DOpusPluginHelperUtil));
		HINSTANCE hOpus = Dll();
		if (hOpus)
		{
			dph_pfnDOpusChooseFont=(PFNDOPUSCHOOSEFONT)GetProcAddress(hOpus,FUNCNAME_DOPUSCHOOSEFONT);
			dph_pfnShowRequestDlg=(PFNSHOWREQUESTDLG)GetProcAddress(hOpus,FUNCNAME_SHOWREQUESTDLG);
			dph_pfnDrawPictureFrameInDIB=(PFNDRAWPICTUREFRAMEINDIB)GetProcAddress(hOpus,FUNCNAME_DRAWPICTUREFRAMEINDIB);
			dph_pfnCalcCRC32=(PFNCALCCRC32)GetProcAddress(hOpus,FUNCNAME_CALCCRC32);
			dph_pfnCreateButtonIcons=(PFNCREATEBUTTONICONS)GetProcAddress(hOpus,FUNCNAME_CREATEBUTTONICONS);
			dph_pfnCreateDialogResizer=(PFNCREATEDIALOGRESIZER)GetProcAddress(hOpus,FUNCNAME_CREATEDIALOGRESIZER);
			dph_pfnAddDialogResizerCtl=(PFNADDDIALOGRESIZERCTL)GetProcAddress(hOpus,FUNCNAME_ADDDIALOGRESIZERCTL);
			dph_pfnHandleDialogResizerMsg=(PFNHANDLEDIALOGRESIZERMSG)GetProcAddress(hOpus,FUNCNAME_HANDLEDIALOGRESIZERMSG);
			dph_pfnFreeDialogResizer=(PFNFREEDIALOGRESIZER)GetProcAddress(hOpus,FUNCNAME_FREEDIALOGRESIZER);
			dph_pfnGetGlyphSize=(PFNGETGLYPHSIZE)GetProcAddress(hOpus,FUNCNAME_GETGLYPHSIZE);
			dph_pfnDrawGlyph=(PFNDRAWGLYPH)GetProcAddress(hOpus,FUNCNAME_DRAWGLYPH);
			dph_pfnGetString=(PFNGETSTRING)GetProcAddress(hOpus,FUNCNAME_GETSTRING);
			dph_pfnGetLangDlg=(PFNGETLANGDLG)GetProcAddress(hOpus,FUNCNAME_GETLANGDLG);
			dph_pfnCreateLangDlg=(PFNCREATELANGDLG)GetProcAddress(hOpus,FUNCNAME_CREATELANGDLG);
			dph_pfnLangDlgBox=(PFNLANGDLGBOX)GetProcAddress(hOpus,FUNCNAME_LANGDLGBOX);
			dph_pfnHashInit=(PFNHASHINIT)GetProcAddress(hOpus,FUNCNAME_HASHINIT);
			dph_pfnHashChunk=(PFNHASHCHUNK)GetProcAddress(hOpus,FUNCNAME_HASHCHUNK);
			dph_pfnHashEnd=(PFNHASHEND)GetProcAddress(hOpus,FUNCNAME_HASHEND);
			dph_pfnHashFree=(PFNHASHFREE)GetProcAddress(hOpus,FUNCNAME_HASHFREE);
			dph_pfnDOLoadImage=(PFNDOLOADIMAGE)GetProcAddress(hOpus,FUNCNAME_DOLOADIMAGE);
		}
		else
		{
			// Special case for GetString which is also exported by the dopusx64.exe helper proxy.
			hOpus = GetModuleHandle(0);
			if (hOpus)
			{
				dph_pfnGetString=(PFNGETSTRING)GetProcAddress(hOpus,FUNCNAME_GETSTRING);
			}
		}
	}

	BOOL DOpusChooseFont(HWND hWnd,LPDOPUSCHOOSEFONT lpChoose) {
		return (dph_pfnDOpusChooseFont)?dph_pfnDOpusChooseFont(hWnd,lpChoose):FALSE;
	}
	int ShowRequestDlg(LPSHOWREQUESTDLGDATA lpDlgData) {
		return (dph_pfnShowRequestDlg)?dph_pfnShowRequestDlg(lpDlgData):0;
	}
	BOOL DrawPictureFrameInDIB(const BITMAPINFO* pBMI,LPVOID pBits,const RECT *prc,int iFrameSize=0,int iShadowSize=0) {
		return (dph_pfnDrawPictureFrameInDIB)?dph_pfnDrawPictureFrameInDIB(pBMI,pBits,prc,iFrameSize,iShadowSize):FALSE;
	}
	DWORD CalcCRC32(DWORD dwCRCIn,LPCBYTE pData,DWORD dwSize)
	{
		return (dph_pfnCalcCRC32)?dph_pfnCalcCRC32(dwCRCIn,pData,dwSize):0;
	}
	HIMAGELIST CreateButtonIcons()
	{
		return (dph_pfnCreateButtonIcons)?dph_pfnCreateButtonIcons():0;
	}
	HANDLE CreateDialogResizer(HWND hWnd,int iNumCtls,LPDLGRESIZERCONTROL pCtls)
	{
		return (dph_pfnCreateDialogResizer)?dph_pfnCreateDialogResizer(hWnd,iNumCtls,pCtls):0;
	}
	BOOL AddDialogResizerCtl(HANDLE hResizer,HWND hWnd,DWORD dwFlags,UINT_PTR idCtl)
	{
		return (dph_pfnAddDialogResizerCtl)?dph_pfnAddDialogResizerCtl(hResizer,hWnd,dwFlags,idCtl):FALSE;
	}
	BOOL HandleDialogResizerMsg(HANDLE hResizer,HWND hWnd,UINT uMsg,WPARAM wParam,LPARAM lParam)
	{
		return (dph_pfnHandleDialogResizerMsg)?dph_pfnHandleDialogResizerMsg(hResizer,hWnd,uMsg,wParam,lParam):FALSE;
	}
	void FreeDialogResizer(HANDLE hResizer)
	{
		if (dph_pfnFreeDialogResizer) dph_pfnFreeDialogResizer(hResizer);
	}
	DWORD GetGlyphSize(int iSet,LPSIZE psz=0)
	{
		return (dph_pfnGetGlyphSize)?dph_pfnGetGlyphSize(iSet,psz):0;
	}
	void DrawGlyph(int iSet,int iGlyph,HDC hDC,LPCRECT prc,DWORD dwFlags=0,COLORREF crSolid=CLR_NONE)
	{
		if (dph_pfnDrawGlyph) dph_pfnDrawGlyph(iSet,iGlyph,hDC,prc,dwFlags,crSolid);
	}
	SIZE_T GetString(UINT uiMsgId,LPWSTR* pszStrBuf,SIZE_T cchBufSize = 0)
	{
		return (dph_pfnGetString) ? dph_pfnGetString(uiMsgId,pszStrBuf,cchBufSize) : 0;
	}
	LPCDLGTEMPLATE GetLangDlg(LPWSTR lpszID,LPDWORD lpdwSize)
	{
		return (dph_pfnGetLangDlg) ? dph_pfnGetLangDlg(lpszID,lpdwSize) : 0;
	}
	HWND CreateLangDlg(HINSTANCE hInstance,LPWSTR lpszID,HWND hWndParent,DLGPROC pfnDlgProc,DWORD_PTR dwParam)
	{
		return (dph_pfnCreateLangDlg) ? dph_pfnCreateLangDlg(hInstance,lpszID,hWndParent,pfnDlgProc,dwParam) : 0;
	}
	INT_PTR LangDlgBox(HINSTANCE hInstance,LPWSTR lpszID,HWND hWndParent,DLGPROC pfnDlgProc,DWORD_PTR dwParam)
	{
		return (dph_pfnLangDlgBox) ? dph_pfnLangDlgBox(hInstance,lpszID,hWndParent,pfnDlgProc,dwParam) : 0;
	}
	HANDLE HashInit(HashType type)
	{
		return (dph_pfnHashInit) ? dph_pfnHashInit(type) : 0;
	}
	void HashChunk(HANDLE hHash, LPCBYTE pbData, UINT cbData)
	{
		if (dph_pfnHashChunk) dph_pfnHashChunk(hHash,pbData,cbData);
	}
	LPVOID HashEnd(HANDLE hHash,HashOutput type,UINT* pcbSize)
	{
		return (dph_pfnHashEnd) ? dph_pfnHashEnd(hHash,type,pcbSize) : 0;
	}
	void HashFree(HANDLE hHash)
	{
		if (dph_pfnHashFree) dph_pfnHashFree(hHash);
	}
	BOOL DOLoadImage(DOLoadImageData* pData)
	{
		return (dph_pfnDOLoadImage) ? dph_pfnDOLoadImage(pData) : FALSE;
	}
};

class DOpusPluginHelperWow64 : public DOpusPluginHelperBase
{
	PFNDISABLEWOW64REDIRECTION		dph_pfnDisableWow64Redirection;
	PFNREVERTWOW64REDIRECTION		dph_pfnRevertWow64Redirection;

public:
	DOpusPluginHelperWow64()
	{
		memset(this,0,sizeof(DOpusPluginHelperWow64));
		HINSTANCE hOpus = Dll();
		if (hOpus)
		{
			dph_pfnDisableWow64Redirection=(PFNDISABLEWOW64REDIRECTION)GetProcAddress(hOpus,FUNCNAME_DISABLEWOW64REDIRECTION);
			dph_pfnRevertWow64Redirection=(PFNREVERTWOW64REDIRECTION)GetProcAddress(hOpus,FUNCNAME_REVERTWOW64REDIRECTION);
		}
	}

	HANDLE DisableWow64Redirection(void)
	{
		return (dph_pfnDisableWow64Redirection)?dph_pfnDisableWow64Redirection():0;
	}
	void RevertWow64Redirection(HANDLE hHandle)
	{
		if (dph_pfnRevertWow64Redirection && hHandle) dph_pfnRevertWow64Redirection(hHandle);
	}
};


class DOpusPluginHelper : public DOpusPluginHelperConfig, public DOpusPluginHelperXML, public DOpusPluginHelperFunction,
	public DOpusPluginHelperRegistry, public DOpusPluginHelperUtil, public DOpusPluginHelperWow64
{
};

class DOpusPluginAutoWow64Helper : public DOpusPluginHelperWow64
{
	HANDLE		dph_hHandle;

public:
	DOpusPluginAutoWow64Helper()
	{
		dph_hHandle=DisableWow64Redirection();
	}
	~DOpusPluginAutoWow64Helper()
	{
		RevertWow64Redirection(dph_hHandle);
	}
};

#endif

#endif

